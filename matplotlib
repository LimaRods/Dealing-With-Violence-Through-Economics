{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import geopandas\n",
    "import mapclassify\n",
    "import math\n",
    "import datetime as dt\n",
    "import os\n",
    "import re\n",
    "import scipy\n",
    "import statsmodels.api as sm\n",
    "import sklearn\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sea\n",
    "%notebook matplotlib\n",
    "\n",
    "from IPython.core.display import display, HTML\n",
    "display(HTML(\"<style>.container { width:100% !important; }</style>\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import geopandas\n",
    "import mapclassify\n",
    "import math\n",
    "import datetime as dt\n",
    "import os\n",
    "import re\n",
    "import scipy\n",
    "import statsmodels.api as sm\n",
    "import sklearn\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sea\n",
    "%notebook matplotlib\n",
    "\n",
    "from IPython.core.display import display, HTML\n",
    "display(HTML(\"<style>.container { width:100% !important; }</style>\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Homicide deaths ocross the country\n",
    "#source: Atlas da violencia - ipea.gov.br\n",
    "#Firtly, I've to choose the year I'll look at to ensure all values I need is available in that year\n",
    "\n",
    "df_h = pd.read_csv('homicidios.csv', sep = ';')\n",
    "year = 2016\n",
    "df_h = df_h[df_h.período == year].drop_duplicates(subset = 'cod', keep = 'first')\n",
    "deaths = df_h['valor'].sum()\n",
    "print('Number of homicides according to that database: {}'.format(deaths))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Homicids detahs in capitals\n",
    "capitals = ['Manaus','Belém','Macapá','São Luís','Terezinha','Fortaleza','Natal','João Pessoa','Recife','Maceió',\n",
    "'Aracaju','Salvador','Belo Horizonte','Vitória','Rio de Janeiro','São Paulo','Curitiba','Florianópolis','Porto Alegre',\n",
    "'Cuiabá','Goiânia','Brasília','Campo Grande','Porto Velho','Boa Vista','Palmas','Rio Branco']\n",
    "\n",
    "#Remove cities whose their name is the same of the capitals\n",
    "df_cap_h = df_h[df_h['nome'].isin(capitals)].sort_values(by =['nome','valor']).drop_duplicates(subset = 'nome', keep = 'last')\n",
    "print('number of capitals:',df_cap_h.shape[0])\n",
    "\n",
    "\n",
    "deaths_cap = df_cap_h['valor'].sum()\n",
    "codes_cap = df_cap_h['cod'].to_list()\n",
    "\n",
    "percentage_cap = round((deaths_cap/deaths),4)\n",
    "print('The capitals account for {}% of homicide deaths caused in Brazil ({})'.format(round(percentage_cap*100,2),year))\n",
    "df_cap_h.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Source: Base de Homicídios SIM\n",
    "df_sim = pd.read_excel(\"1. SIM (Homicidios)//DadosHomicidios_2013-18_SIM.xlsx\", sheet_name= 'Campos de interesse')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting 15-29 years homicide deaths \n",
    "df_young = df_sim.copy()\n",
    "df_young['DTOBITO'] = df_young['DTOBITO'].apply(lambda x: str(x)[-4:])\n",
    "df_young = df_young[(df_young.CIRCOBITO == 3) & (df_young.IDADE >= 415) & (df_young.IDADE <= 429) & (df_young.DTOBITO == str(year)) ]\n",
    "deaths = df_young.shape[0]\n",
    "print('Number of homocides: {}'.format(deaths))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "target = round(0.8 *df_young.shape[0],2)\n",
    "target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Grouping deaths by ciy\n",
    "df_death = df_young.groupby(by = ['CODMUNOCOR']).agg({'CONTADOR': 'count'}).rename(columns = {df_young.columns[0]: \"N_HOMICIDES\"}).sort_values( by = 'N_HOMICIDES',ascending = False).reset_index()\n",
    "all_cities = df_death.shape[0] # number f cities\n",
    "df_death['Cumulative'] = df_death['N_HOMICIDES'].cumsum(axis = 0, skipna = True)\n",
    "df_80 = df_death.iloc[:400,:]\n",
    "df_80"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Checking duplicated city codes\n",
    "duplicated = df_80.duplicated(subset ='CODMUNOCOR', keep = 'last' )\n",
    "display(df_80[duplicated])\n",
    "print('OK')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = round(df_80.iloc[-1,-1]/deaths*100,2)\n",
    "target_cities = round((df_80.shape[0]/all_cities)*100,2)\n",
    "print(\"The 400 cities with the highest number of homocides({}% of cities provided by the SIM databse) account for {}% of deaths by homicide in {}\".format(target_cities,result,year))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_atlas_hd = pd.read_excel(io = \"Dados_registro_administrativo_total_2013_2017.xlsx\", sheet_name = 'MUNICÍPIO')\n",
    "df_atlas_hd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Merging dataframes\n",
    "df_hd = df_atlas_hd.copy()\n",
    "fields = ['ANO','IBGE7','NOME', 'REN_PIBPC_D', 'REN_VAPC_D', 'REN_PVAAGR', 'REN_PVAIND',\n",
    "          'REN_PVAADM', 'REN_PVASERV', 'REN_RENSF_D', 'REN_TRPCBF_D', 'REN_TRPCBPC_D', 'PIND_POS',\n",
    "          'PMPOB_POS','PPOB_POS','PBF',\"POP_TOT\", \"TTREVA_EF_TOTAL\",\"PDEFAGUA\",\"PDEFESGOTO\",\"PDEFLIXO\",\"PDEFSAN\"]\n",
    "\n",
    "df_hd= df_hd[:][df_hd.ANO == year]\n",
    "df_hd['CODMUN'] = df_hd['IBGE7'].map(lambda x: str(x)[:6])\n",
    "df_hd\n",
    "\n",
    "df_final = pd.merge(df_80.astype({'CODMUNOCOR':str}),df_hd, how = 'inner', right_on= 'CODMUN', left_on= 'CODMUNOCOR')\n",
    "df_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Computing the homicide rate for 15-29 years people\n",
    "#Note: I could not find exactly the 15-29 years population of all cities in the databases provided by BCG GAMMA, then I used data from datasus.gov (number of homicides/100,000 pop)\n",
    "df_pop = pd.read_excel(io ='pop.xlsx', sheet_name= 'pop_15_29 tab')\n",
    "df_pop = df_pop.drop(df_pop.index[-1], axis = 0)\n",
    "df_pop['CODE'] = df_pop['Cidade'].apply(lambda string:re.compile(r'(^\\d+)').search(string).group())\n",
    "df_pop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pop['População'].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Merging and computing the detah rate\n",
    "df_check = pd.merge(df_final, df_pop, how = 'inner', left_on=  'CODMUN', right_on= 'CODE').rename(columns = {'População': '15_29_YEAR_POP'})\n",
    "\n",
    "#Checking null values\n",
    "null =df_check['CODE'].isnull()\n",
    "display(df_check[null])\n",
    "\n",
    "#Homicide rate-\n",
    "df_check['HOMICIDE_RATE'] = (df_check['N_HOMICIDES']/df_check['15_29_YEAR_POP']) *100000\n",
    "df_check.sort_values(by = 'HOMICIDE_RATE').head()\n",
    "\n",
    "## Inserting 2015 education data\n",
    "education = [\"TTREVA_EF_TOTAL\",\"TTREVA_EF_PUB\"]\n",
    "df_education = df_atlas_hd[df_atlas_hd.ANO == 2014][education + [\"IBGE7\"]]\n",
    "df_check = pd.merge(df_check.drop(education, axis =1), df_education, how = 'inner', on =\"IBGE7\")\n",
    "\n",
    "df_check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_check.to_excel('14-29 year homicide rate x socieconomic data 2016.xlsx', index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Sort values\n",
    "df_check =  df_check.sort_values(by = 'REN_PIBPC_D', ascending = True)\n",
    "df_check[\"TTREVA_EF_TOTAL\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Input variable\n",
    "variable = 'REN_PIBPC_D'\n",
    "\n",
    "\n",
    "#Computing the correlation between GDP per capita and homicide rate\n",
    "corr_gdp = df_check['HOMICIDE_RATE'].corr(df_check[variable], method = \"pearson\")\n",
    "print('Corr: ', corr_gdp )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Linear regression (Ordinary least squares)\n",
    "#Using a first degree equation (f(x) = a + bx) to approximate\n",
    "\n",
    "X = df_check[variable].to_numpy()\n",
    "Y = df_check['HOMICIDE_RATE'].to_numpy()\n",
    "\n",
    "# Getting rid of outliers:\n",
    "#X = X[:-5]\n",
    "#Y = Y[:-5]\n",
    "\n",
    "linear_coef = np.polyfit(y = Y, x = X ,deg = 1)\n",
    "a1,a0 = linear_coef\n",
    "F = a0 + a1 *X\n",
    "print('f(x) = {} + {}x'.format(a0,a1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "SSE = np.sum((Y-F)**2)\n",
    "print('SSE: ', SSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "corr_matrix = np.corrcoef(Y,F)\n",
    "R_sq = corr_matrix[0,1] **2\n",
    "print('R^2:',R_sq)\n",
    "R_2 = sklearn.metrics.r2_score(Y,F)\n",
    "print('R^2 (sklearn): ',R_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(sm.OLS(Y,sm.add_constant(X)).fit().summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Applying least squares algorithm\n",
    "\n",
    "m = 3 # number of matrix colum/row (mXm),  m equations, m-1 degree of the polynomial\n",
    "A = np.zeros([m,m]) # Scalar Produt of a matrix  [<Gi,Gj>] mXm\n",
    "B = np.zeros([m,1]) # Independent matrix [<Gj,Yi]> mx1\n",
    "\n",
    "for i in range(m):\n",
    "    for j in range(m):\n",
    "        A[i][j] = np.sum((X**i)*(X**j))     \n",
    "        \n",
    "for i in range(m):\n",
    "    B[i][0] = np.sum(Y*X**i)\n",
    "\n",
    "#Linear System solution AX = B --> X = BA^-1\n",
    "matrix_solution = np.linalg.inv(A).dot(B)\n",
    "a,b,c = matrix_solution\n",
    "\n",
    "G = 0\n",
    "for i in range(len(matrix_solution)):\n",
    "    G += matrix_solution[i]*X**i    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy.polynomial.polynomial import Polynomial\n",
    "\n",
    "#Sum of squared error\n",
    "print('SSE: ', np.sum((Y-G)**2))\n",
    "\n",
    "#R squared\n",
    "corr_matrix = np.corrcoef(Y,G)\n",
    "R_sq = corr_matrix[0,1] **2\n",
    "print('R^2:',R_sq)\n",
    "\n",
    "#showing coeficients\n",
    "y = np.polyfit(X,Y,2)\n",
    "p = np.poly1d(y)\n",
    "Polynomial(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Non linear regression\n",
    "\n",
    "#log of function G(x)\n",
    "#T = np.log(X)\n",
    "Z =np.log(Y)\n",
    "T = np.log(X)\n",
    "\n",
    "H = {0: np.array([1]*len(T)), 1:T} #My approximation function h(X)= alpha + beta X\n",
    "m = len(H) # number of matrix colum/row (mXm)\n",
    "A = np.zeros([m,m]) # Scalar Produt of a matrix [<Gi,Gj>] mXm\n",
    "B = np.zeros([m,1]) # Independent matrix [<Gj,Yi]> mx1\n",
    "\n",
    "\n",
    "for i in range(m): \n",
    "    for j in range(m):\n",
    "        A[i][j] = np.sum(H[i]*H[j])     \n",
    "        \n",
    "for i in range(m):\n",
    "    B[i][0] = np.sum(Z*H[i])\n",
    "\n",
    "#Linear System solution AX = B --> X = BA^-1\n",
    "matrix_solution = np.linalg.inv(A).dot(B)\n",
    "alpha,beta = matrix_solution\n",
    "\n",
    "#Figure out the constants of the exponential function\n",
    "v = np.exp(alpha)\n",
    "w= - beta\n",
    "\n",
    "#G(X)\n",
    "#G_non_linear =s * np.exp(-t*X)\n",
    "G_non_linear = v/((X-5)**w)- 50\n",
    "G_non_linear = np.nan_to_num(G_non_linear)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "G_non_linear = np.nan_to_num(G_non_linear)\n",
    "\n",
    "#Sum of squared error\n",
    "print('SSE: ', np.sum((Y[12:]-G_non_linear[12:])**2))\n",
    "\n",
    "#R squared\n",
    "corr_matrix = np.corrcoef(Y,G_non_linear)\n",
    "R_sq = corr_matrix[0,1] **2\n",
    "print('R^2:',R_sq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting---------------------------------------\n",
    "\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axis.grid': True})\n",
    "\n",
    "#Scatter\n",
    "plt.plot(X,Y,'o',linewidth = 2.4, markersize = 7, alpha = 0.45, label = 'Cities')\n",
    "    \n",
    "#Labels\n",
    "plt.xlabel('GDP per Capita')\n",
    "plt.ylabel('Homicides Rate - 15-29 years')\n",
    "plt.title(' The Relationship Between Homicides Rate and GDP per Capita of Brazilian Cities  - {} $(Corr = {}$)'.format(year,round(corr_gdp,2)), fontweight = 'bold')\n",
    "\n",
    "#Fitting data\n",
    "xplot = np.linspace(0,X[-1],500)\n",
    "fplot =np.array([],float) # f(x) = a0 + a1x\n",
    "gplot =np.array([],float) # g(x) = a + bx + cx^2\n",
    "hplot =np.array([],float) # h(x) = d/x^e\n",
    "for xi in xplot:\n",
    "    fi = a0 + a1*xi\n",
    "    fplot = np.append(fplot,fi)\n",
    "    gi = a + b*xi + c*xi**2\n",
    "    gplot = np.append(gplot,gi)\n",
    "    hi = (v/((xi-5)**w))- 30\n",
    "    hplot = np.append(hplot,hi)\n",
    "\n",
    "\n",
    "plt.plot(xplot,gplot,'-', linewidth = 1, c= 'crimson', label = '$y = {} + {}x + {}x^2$'.format(round(a[0],2),round(b[0],2),round(c[0],2)))\n",
    "plt.plot(xplot, fplot,'-', linewidth = 1, c= 'midnightblue', label = '$y = {} + {}x$'.format(round(a0,2),round(a1,2)))\n",
    "plt.plot(xplot, hplot,'-', linewidth = 1, c= 'goldenrod', label = '$y = [{}/(x-5)^ ({})]-30$'.format(round(v[0],2),round(w[0],2)))\n",
    "\n",
    "#Legend\n",
    "plt.legend(loc = 'best', shadow = False, frameon = True, framealpha = 0.8)\n",
    "#Settings\n",
    "plt.gcf().set_dpi(120)\n",
    "plt.gcf().set_size_inches(9,4.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting the metrics names of alls fields\n",
    "#Source: Atlas de Desenvolvimento Humano 2013-2017\n",
    "df_metric = pd.read_excel(\"Dados_registro_administrativo_total_2013_2017.xlsx\", sheet_name= \"LEGENDA\")\n",
    "df_metric = df_metric[df_metric.columns].set_index('SIGLA', drop = True)\n",
    "dict_metric = dict(df_metric[df_metric.columns[0]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "fields =[\n",
    "\"CODE\",\n",
    "\"HOMICIDE_RATE\",\n",
    "\"PIND_POS\",\n",
    "\"PMPOB_POS\",\n",
    "\"PPOB_POS\",\n",
    "\"PBF\",\n",
    "\"REN_PIBPC_D\",\n",
    "\"REN_VAPC_D\",\n",
    "\"REN_PVAAGR\",\n",
    "\"REN_PVAIND\",\n",
    "\"REN_PVAADM\",\n",
    "\"REN_PVASERV\",\n",
    "\"REN_RENSF_D\",\n",
    "\"REN_TRPCBF_D\",\n",
    "\"REN_TRPCBPC_D\",\n",
    "\"TTREVA_EF_TOTAL\",\n",
    "\"TTREVA_EF_PUB\"]\n",
    "df_income = df_check[fields].set_index('CODE', drop = True)\n",
    "\n",
    "# Get rid of outliers\n",
    "df_income = df_income.sort_values(by = 'REN_RENSF_D', ascending = True)\n",
    "df_income  = df_income.drop(index = df_income.index[[-3,-2,-1]], axis = 0)\n",
    "\n",
    "#Rename columns\n",
    "#All correlation\n",
    "corr_inc =  df_income.rename(columns = dict_metric).corr()\n",
    "sea.heatmap(round(corr_inc,2), annot = True,cmap = 'viridis',)\n",
    "plt.title(\"Correlation (Spearman) Matrix\", fontweight = 'bold', fontsize = 12)\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,15)\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.subplots_adjust(bottom = .25)\n",
    "plt.xticks(size = 12)\n",
    "plt.yticks(size = 12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ((ax1,ax2,ax3),(ax4,ax5,ax6),(ax7,ax8,ax9),(ax10,ax11,ax12), (ax13,ax14,ax15)) = plt.subplots(5,3, sharey = True)\n",
    "axes = [ax1,ax2,ax3,ax4,ax5,ax6,ax7,ax8,ax9,ax10,ax11,ax12,ax13, ax14, ax15]\n",
    "columns = list(df_income.columns)\n",
    "columns.remove(\"HOMICIDE_RATE\")\n",
    "\n",
    "for col,ax in zip(columns,axes):\n",
    "    \n",
    "    #pearson correlation\n",
    "    corr = df_income[\"HOMICIDE_RATE\"].corr(df_income[col], method = 'pearson')\n",
    "    #Plotting\n",
    "    ax.plot(df_income[col], df_income['HOMICIDE_RATE'],'o',color =  'midnightblue', markersize = 9, alpha = 0.6)\n",
    "    ax.set_xlabel(dict_metric[col], fontsize = 15)\n",
    "    ax.set_ylabel('14-29 Years Homicide Rate', fontsize = 15)\n",
    "    ax.set_title(\"{} X Homicide Rate - Corr: {}\".format(col,round(corr,2)) ,size = 15, fontweight = 'bold')\n",
    "       \n",
    "    \n",
    "#Setting\n",
    "plt.gcf().set_size_inches(24,18)\n",
    "plt.gcf().set_dpi(150)\n",
    "plt.subplots_adjust(bottom = -0.8)\n",
    "plt.xticks(fontsize = 12)\n",
    "plt.yticks(fontsize = 12)\n",
    "#plt.savefig('Correlations_Income.pdf', quality = 97, optimize = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "df_income.plot(kind =\"scatter\", x= \"REN_PIBPC_D\", y = 'HOMICIDE_RATE' , c='REN_RENSF_D', colormap='viridis',figsize = (12,6), linewidth = 6)\n",
    "\n",
    "plt.xlabel('GDP per Capita')\n",
    "plt.ylabel('15-29 Years Homicides Rate')\n",
    "plt.title('Homicide rate X GDP per capita X Average Income in the formal sector', fontweight = 'bold')\n",
    "plt.gcf().set_size_inches(12,6)\n",
    "plt.gcf().set_dpi(100)\n",
    "#plt.subplots_adjust(bottom = -.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "def scatter_3_var(var_name,label_name,corr_name):\n",
    "    fig, ((ax1,ax2,ax3),(ax4,ax5,ax6),(ax7,ax8,ax9),(ax10,ax11,ax12), (ax13,ax14,ax15)) = plt.subplots(5,3, sharey = True)\n",
    "    axes = [ax1,ax2,ax3,ax4,ax5,ax6,ax7,ax8,ax9,ax10,ax11,ax12,ax13,ax14,ax15]\n",
    "    columns = list(df_income.columns)\n",
    "    columns.remove(\"HOMICIDE_RATE\")\n",
    "\n",
    "    for col,ax in zip(columns,axes):\n",
    "\n",
    "        #Pearson correlation\n",
    "        corr_gdp = round(df_income[var_name].corr(df_income[col]),2)\n",
    "        corr_hr = round(df_income[\"HOMICIDE_RATE\"].corr(df_income[col]),2)\n",
    "\n",
    "        #Plotting\n",
    "        scatter = ax.scatter(x= df_income[var_name], y = df_income['HOMICIDE_RATE'] , c = df_income[col], linewidth = 6, cmap = 'viridis', label = \"${} \\\\rho ={}   \\\\ HR \\\\rho = {}$\".format(corr_name,corr_gdp,corr_hr))\n",
    "        fig.colorbar(mappable = scatter,ax =ax)\n",
    "\n",
    "        #labels\n",
    "        ax.set_xlabel(label_name, fontsize = 15)\n",
    "        ax.set_ylabel('15-29 Years Homicide Rate', fontsize = 15)\n",
    "        ax.set_title(\"{}\".format(dict_metric[col]) ,size = 15, fontweight = 'bold')\n",
    "        ax.legend(loc = 'best')\n",
    "\n",
    "    #Setting\n",
    "    plt.gcf().set_size_inches(27,18)\n",
    "    plt.gcf().set_dpi(150)\n",
    "    plt.subplots_adjust(bottom = -0.8)\n",
    "    plt.xticks(fontsize = 12)\n",
    "    plt.yticks(fontsize = 12)\n",
    "    #plt.savefig('Correlations_Income.pdf', quality = 97, optimize = True)\n",
    "\n",
    "scatter_3_var(\"REN_PIBPC_D\",\"GDP Per Capita\",'GDP')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "scatter_3_var('REN_RENSF_D',\"Average income in the formal sector\",'IFS')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "field_core = ['HOMICIDE_RATE','TTREVA_EF_PUB','REN_PIBPC_D','REN_RENSF_D','REN_PVAADM']\n",
    "corr_inc =  df_income[field_core].rename(columns = dict_metric).corr()\n",
    "sea.heatmap(round(corr_inc,2), annot = True,cmap = 'viridis', fmt = '.1g')\n",
    "plt.title(\"Study Core: Correlation (Spearman) Matrix\", fontweight = 'bold', fontsize = 12)\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(8,8)\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.subplots_adjust(bottom = 0.1)\n",
    "plt.xticks(size = 12)\n",
    "plt.yticks(size = 12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "variable = \"REN_PIBPC_D\"\n",
    "#GDP per  capita\n",
    "df_income['GDP_QUANTILE'] = df_income[variable].apply(lambda x: \"0-10\" if x <= 10 else \n",
    "                                                                (\"10-20\" if x > 10 and x <=20 else\n",
    "                                                                (\"20-30\" if x > 20 and x <=30 else\n",
    "                                                                (\"30-40\" if x > 30 and x <=40 else\n",
    "                                                                (\"40-50\" if x > 40 and x <=50 else\n",
    "                                                                (\"> 50\" if x > 50 else x))))))\n",
    "\n",
    "#Average income in the formal sector\n",
    "df_income['FORM_SEC_QUANTILE'] = df_income[\"REN_RENSF_D\"].apply(lambda x: \"0-500\" if x <= 500 else \n",
    "                                                                (\"500-1000\" if x > 500 and x <= 1000 else\n",
    "                                                                (\"1000-1500\" if x > 1000 and x <=1500 else\n",
    "                                                                (\"1500-2000\" if x > 1500 and x <=2000 else\n",
    "                                                                (\">2000\" if x > 2000 else x\n",
    "                                                                )))))\n",
    "df_income.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_box(dataset,x,y,xlabel,ylabel,title):\n",
    "    #plotting a box-splot chart\n",
    "    sea.set_style('darkgrid', {'axes.grid': True})\n",
    "    plt.figure()\n",
    "    box = sea.boxplot(data = dataset, x = x, y =y, palette = \"GnBu_r\", orient = \"v\", linewidth = 0.5, saturation= 0.56, fliersize= 0)\n",
    "    swarm = sea.swarmplot(data = dataset, x = x, y = y, palette = 'GnBu_r', orient = 'v', size = 7,alpha= 1, edgecolor= 'grey')\n",
    "    plt.xlabel(xlabel,fontsize = 14)\n",
    "    plt.ylabel(ylabel, fontsize = 14)\n",
    "    #box.set(xlabel = \"Performance (%)\", ylabel = \"School\")\n",
    "    plt.title(title, fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "\n",
    "    #Adjusts\n",
    "    plt.gcf().set_size_inches(17,8)\n",
    "    plt.gcf().set_dpi(100)\n",
    "    plt.xticks(rotation = 35)\n",
    "    #plt.subplots_adjust(left = 0.4)b\n",
    "plot_box(df_income.sort_values(by =\"REN_RENSF_D\", ascending = True), y = \"HOMICIDE_RATE\", x = 'FORM_SEC_QUANTILE',xlabel = \"Average Income in the formal sector\", ylabel =  \"15-29 Years Homicide Rate\", title = \"Box-Plot:Average Income in the formal sector X Homicide Rate\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Normality Test\n",
    "#Using Shapiro-Wilk test to evaluate my data population in order to figure out whether or not my sample data proceeds a Gaussian distribution (sugested to sample size N< 5000)\n",
    "stat,p = scipy.stats.shapiro(df_income['HOMICIDE_RATE']) \n",
    "alpha = 0.05\n",
    "if  p < alpha:\n",
    "    print(\"p-value {} and test statistic {}. The data dont'n follow a Gaussian distribution\".format(p, stat))\n",
    "if p > alpha:\n",
    "    print(\"p-value {} and test statistic {}. I can't conclude the data do not follow a Gaussian shape\".format(p,stat))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q-Q Ploting in order to figure out if the dataset fits a standar normal distribution\n",
    "import statsmodels.graphics.gofplots as stmod\n",
    "stmod.qqplot(df_income['HOMICIDE_RATE'], line = 's',  alpha = 0.75, linewidth = 5)\n",
    "plt.gcf().set_size_inches(7,5)\n",
    "plt.title('Normal Q-Q Plot', fontweight = 'bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Homicide rate distribution\n",
    "plt.figure()\n",
    "plt.hist(df_income['HOMICIDE_RATE'], bins = 30, density = 'True', facecolor = 'midnightblue', alpha = 0.85)\n",
    "sea.kdeplot(df_income['HOMICIDE_RATE'], color = 'red', alpha = 0.8)\n",
    "\n",
    "#Label\n",
    "plt.ylabel('Frequency', fontsize = 12)\n",
    "plt.xlabel('14-29 Years Homicide Rate', fontsize = 12)\n",
    "plt.title('Homicide Rate Distribution', fontsize = 12, fontweight = 'bold')\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(14,7.5)\n",
    "plt.gcf().set_dpi(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Descriptive Statistic\n",
    "mean = np.mean(df_income['HOMICIDE_RATE'])\n",
    "std = np.std(df_income['HOMICIDE_RATE'])\n",
    "kurtosis = scipy.stats.kurtosis(df_income['HOMICIDE_RATE'])\n",
    "skewness = scipy.stats.skew(df_income['HOMICIDE_RATE'])\n",
    "df_desc = pd.DataFrame([[mean,std,kurtosis,skewness]], columns = ['Mean','Std Deviation','Kurtosis', 'Skewness'])\n",
    "display(df_income['HOMICIDE_RATE'].describe())\n",
    "df_desc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_1 = df_income[df_income.FORM_SEC_QUANTILE == \"500-1000\"]['HOMICIDE_RATE'].to_numpy()\n",
    "sample_2 = df_income[df_income.FORM_SEC_QUANTILE == \"1000-1500\"]['HOMICIDE_RATE'].to_numpy()\n",
    "sample_3 = df_income[df_income.FORM_SEC_QUANTILE == \"1500-2000\"]['HOMICIDE_RATE'].to_numpy()\n",
    "sample_4 = df_income[df_income.FORM_SEC_QUANTILE == \">2000\"]['HOMICIDE_RATE'].to_numpy()\n",
    "F,p = scipy.stats.kruskal(sample_1,sample_2,sample_3,sample_4)\n",
    "alpha = 0.05\n",
    "if p < alpha:\n",
    "    print(\"F = {}, p-value = {}. I reject null hypothesis Ho. At least one popullation mean is diferent from others\".format(F,p))\n",
    "if p > alpha:\n",
    "     print(\"F = {}, p-value = {}. I don't have enough evidence to reject  null hypothesisHo. All population means are statistically equal\".format(F,p))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "dict_metric.setdefault('HOMICIDE_RATE', 'Taxa de homicídio: 14-29 anos')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting the variance\n",
    "variables = [\"HOMICIDE_RATE\",\"REN_RENSF_D\",\"REN_TRPCBF_D\",\"REN_PVAADM\" ]\n",
    "fig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2)\n",
    "axes = [ax1,ax2,ax3,ax4]\n",
    "\n",
    "for ax,variable in zip(axes,variables):\n",
    "    df_var = df_income.groupby(by = 'FORM_SEC_QUANTILE').agg({variable: [np.mean, np.std]})\n",
    "    df_var = df_var.iloc[[2,0,1,-1],:]\n",
    "    #df_var = df_var.sort_values(by = df_var.columns[0], ascending = False)\n",
    "    plot_var = df_var.plot(fig = (10,5),ax = ax, cmap = 'viridis', fontsize = 14)\n",
    "    plot_var.set_xlabel(\"Average Income in The Formal Sector\", fontsize = 14)\n",
    "    plot_var.set_title(\"The std of {} throughout the average Income in the formal sector\".format(dict_metric[variable]), fontsize = 14, fontweight = 'bold')\n",
    "\n",
    "\n",
    "plt.legend(loc= 'best')\n",
    "plt.gcf().set_size_inches(28,8)\n",
    "plt.subplots_adjust(bottom = -0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Input variable\n",
    "variable = \"REN_RENSF_D\"\n",
    "\n",
    "df_income = df_income.sort_values(by = variable, ascending = True)\n",
    "#Computing the correlation between GDP per capita and homicide rate\n",
    "corr_gdp = df_income['HOMICIDE_RATE'].corr(df_income[variable], method = \"pearson\")\n",
    "print('Corr: ', corr_gdp )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Linear regression (Ordinary least squares)\n",
    "#Using a first degree equation (f(x) = a + bx) to approximate\n",
    "\n",
    "X = df_income[variable].to_numpy()\n",
    "Y = df_income['HOMICIDE_RATE'].to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Applying least squares algorithm\n",
    "\n",
    "m = 3 # number of matrix colum/row (mXm) - m-1 degree\n",
    "A = np.zeros([m,m]) # Produt scalar matrix [<Gi,Gj>] mXm\n",
    "B = np.zeros([m,1]) # Independent matrix [<Gj,Yi]> mx1\n",
    "\n",
    "for i in range(m): # n + 1 degree equation\n",
    "    for j in range(m):\n",
    "        A[i][j] = np.sum((X**i)*(X**j))     \n",
    "        \n",
    "for i in range(m):\n",
    "    B[i][0] = np.sum(Y*X**i)\n",
    "\n",
    "#Linear System solution AX = B --> X = BA^-1\n",
    "matrix_solution = np.linalg.inv(A).dot(B)\n",
    "a,b,c = matrix_solution\n",
    "\n",
    "G = 0\n",
    "for i in range(len(matrix_solution)):\n",
    "    G += matrix_solution[i]*X**i    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Sum of squared error\n",
    "print('SSE: ', np.sum((Y-G)**2))\n",
    "\n",
    "#R squared\n",
    "corr_matrix = np.corrcoef(Y,G)\n",
    "R_sq = corr_matrix[0,1] **2\n",
    "print('R^2:',R_sq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Non linear regression\n",
    "\n",
    "#log of function G(x)\n",
    "#T = np.log(X)\n",
    "Z =np.log(Y)\n",
    "T = np.log(X)\n",
    "\n",
    "H = {0: np.array([1]*len(T)), 1:T} #My approximation function h(X)= alpha + beta X\n",
    "m = len(H) # number of matrix colum/row (mXm) \n",
    "A = np.zeros([m,m]) # Scalar Produt of a matrix  [<Gi,Gj>] mXm\n",
    "B = np.zeros([m,1]) # Independent matrix [<Gj,Yi]> mx1\n",
    "\n",
    "\n",
    "for i in range(m): # n + 1 degree equation\n",
    "    for j in range(m):\n",
    "        A[i][j] = np.sum(H[i]*H[j])     \n",
    "        \n",
    "for i in range(m):\n",
    "    B[i][0] = np.sum(Z*H[i])\n",
    "\n",
    "#Linear System solution AX = B --> X = BA^-1\n",
    "matrix_solution = np.linalg.inv(A).dot(B)\n",
    "alpha,beta = matrix_solution\n",
    "\n",
    "#Figure out the constants of the exponential function\n",
    "v = np.exp(alpha)\n",
    "w= - beta\n",
    "\n",
    "#G(X)\n",
    "#G_non_linear =s * np.exp(-t*X)\n",
    "G_non_linear = (v[0]/((X-300)**w[0])) - 25\n",
    "G_non_linear = np.nan_to_num(G_non_linear)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "G_non_linear = np.nan_to_num(G_non_linear)\n",
    "\n",
    "#Sum of squared error\n",
    "print('SSE: ', np.sum((Y-G_non_linear)**2))\n",
    "\n",
    "#R squared\n",
    "corr_matrix = np.corrcoef(Y,G_non_linear)\n",
    "R_sq = corr_matrix[0,1] **2\n",
    "print('R^2:',R_sq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_income ['HR predicted'] = df_income['REN_RENSF_D'].apply(lambda x: (v[0]/((x-300)**w[0])) - 25)\n",
    "df_income"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prediction_interval(X,Y,F, pi = 0.95):\n",
    "    \"\"\"\n",
    "    Get a prediction interval for a regression\n",
    "    \n",
    "    Inputs:\n",
    "    X = precitor variable (independent variable)\n",
    "    Y = response variable (denpendent variable)\n",
    "    F =  predicted values\n",
    "\n",
    "    \"\"\"\n",
    "    SSE = np.sum((Y - F)**2)\n",
    "    stdev = np.sqrt(1/(len(Y)-2) *SSE)\n",
    "    alpha = 1- pi\n",
    "    prob = 1 - (alpha/2)\n",
    "    t_score = scipy.stats.t.ppf(prob , X.shape[0])\n",
    "    interval = t_score * stdev\n",
    "    return interval\n",
    "\n",
    "#q = '>2000'\n",
    "#Xt = df_final[df_final.FORM_SEC_QUANTILE == q]['Avg. Income in the Formal Sector']\n",
    "#Yt = df_final[df_final.FORM_SEC_QUANTILE == q]['HOMICIDE_RATE']\n",
    "#Ft = df_final[df_final.FORM_SEC_QUANTILE == q]['HR predicted']\n",
    "#prediction_interval(Xt,Yt,Ft)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_int= pd.DataFrame(df_income.groupby(['FORM_SEC_QUANTILE']).apply(lambda x: prediction_interval(x['REN_RENSF_D'],x.HOMICIDE_RATE, x['HR predicted'])), columns = ['prediction_interval_hr']).sort_index(ascending = True)\n",
    "df_int = df_int.iloc[[2,0,1,-1],:]\n",
    "#df_int.index = [13,20,32]\n",
    "df_int"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 4 points of variance\n",
    "conf_level = 0.95\n",
    "plt.figure()\n",
    "plot_std = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'FORM_SEC_QUANTILE', linewidth = 7, alpha = 0.7, color ='goldenrod', title = \"{}% Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 16)\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_std.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_std.set_ylabel(\"Prediction Interval $(C^o)$\", fontsize = 17)\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_int.index = [500,1000,1500,2000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Newton(X,Y, xi):\n",
    "    'input: dataset (x,y) and x value'\n",
    "    'output: display of pyramid of divided difference and the respective y value'\n",
    "    n = np.shape(Y)[0]\n",
    "    pyramid =  np.zeros([n,n]) #Table of divided - difference\n",
    "    df = pd.DataFrame(pyramid)\n",
    "    df[0] = Y  #including Yi values in the first columns\n",
    "    for j in range(1,n):\n",
    "        for i in range(n-j):\n",
    "            #Creating pyramid of divided difference updating each column\n",
    "            df.iloc[i,j] = (df.iloc[i+1,j-1] -df.iloc[i,j-1])/(X[i+j] - X[i])\n",
    "    #display(df)     \n",
    "    #Newton Polynomial\n",
    "    coef = 1 \n",
    "    yi = df.iloc[0,0]\n",
    "    for i in range(n-1): #iterate in order to have polynomial\n",
    "        coef *= (xi - X[i]) # (x-X0)(x-X1)....(x-Xi-1) for i + n distinct points, i= 0,1,2... n \n",
    "        yi =  yi  + df.iloc[0,i+1] *coef # f(x) = [y0] + (x-x0)[y0,y1] +(x-x0)(x-1)[y0,y1,y2].....\n",
    "    return (yi,df)\n",
    "\n",
    "#Plotting\n",
    "Yint = df_int.values\n",
    "Xint = df_int.index\n",
    "xplot = np.linspace(Xint[0], Xint[-1], num = 100)\n",
    "yplot = []\n",
    "for x in xplot:\n",
    "    yplot.append(Newton(Xint,Yint,x)[0])\n",
    "yplot = np.array(yplot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 6 points of variance\n",
    "plt.figure()\n",
    "plot_int = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'index', linewidth = 7, alpha = 0.7, color ='goldenrod', fontsize = 16)\n",
    "#interpolate\n",
    "plt.plot(xplot,yplot, '-b', color = 'slateblue', alpha = 0.8, label = 'Interpolation Polynomial Curve')\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_int.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_int.set_ylabel(\"Prediction Interval\", fontsize = 17)\n",
    "plot_int.set_title(\"{}% Dynamic Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 17, fontweight = 'bold')\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting---------------------------------------\n",
    "\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axis.grid': True})\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "#Scatter\n",
    "plt.plot(X,Y,'o',linewidth = 2.4, markersize = 9, alpha = 0.45, label = 'Cities', c = 'midnightblue')\n",
    "    \n",
    "#Labels\n",
    "plt.xlabel('Average Income In The Formal Sector', fontsize = 14)\n",
    "plt.ylabel('Homicides Rate - 15-29 Years',fontsize = 14)\n",
    "plt.title(' The Relationship Between The Homicides Rate and The Average Income in the formal sector - {} $(Corr = {}$)'.format(year,round(corr_gdp,2)), fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "#Fitting data\n",
    "xplot = np.linspace(X[0],X[-1],500)\n",
    "hplot =np.array([],float)\n",
    "gplot =np.array([],float) # g(x) = a + bx + cx^2\n",
    "pplot = np.array([],float) # polynomial \n",
    "for xi in xplot:\n",
    "    hi = (v/((xi-300)**w)) - 25\n",
    "    hplot = np.append(hplot,hi)\n",
    "    \n",
    "    gi = a + b*x + c*x**2\n",
    "    gplot = np.append(gplot,gi)\n",
    "    \n",
    "    pi = Newton(Xint,Yint,xi)[0]\n",
    "    pplot = np.append(pplot,pi)\n",
    "   \n",
    "\n",
    "#plt.plot(xplot,gplot,'-', linewidth = 2, c= 'crimson', label = '$y = {} + {}x + {}x^2$'.format(round(a[0],2),round(b[0],2),round(c[0],2)))\n",
    "plt.plot(xplot, hplot,'-', linewidth = 2, c= 'goldenrod', label = '$y = [{}/(x-300)^ ({})]-25$'.format(round(v[0],2),round(w[0],2)))\n",
    "plt.plot(xplot, hplot +pplot ,'--', linewidth = 2, c= 'royalblue', label = '$y \\pm P_3(x) \\ {} \\% \\ PI$'.format(conf_level*100))\n",
    "plt.plot(xplot,np.array(list(map(lambda x: x if x >0 else 0,hplot - pplot))) ,'--', linewidth = 2, c= 'royalblue')\n",
    "\n",
    "#Legend\n",
    "plt.legend(loc = 'best', shadow = False, frameon = True, framealpha = 0.8)\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(13,7)\n",
    "plt.xticks(fontsize = 13)\n",
    "plt.yticks(fontsize = 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prediction_interval(income,polynomial,v= v,w = w, X = Xint, Y = Yint ):\n",
    "    HR = (v[0]/((income-300)**w[0])) -25\n",
    "    P = polynomial(X,Y,income)[0]\n",
    "    HRmax = HR+P\n",
    "    HRmin = HR -P\n",
    "    if HRmin < 0:\n",
    "        HRmin = 0\n",
    "    return np.array([HRmin,HR,HRmax])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_income[\"Lower prediction band\"] = df_income[\"REN_RENSF_D\"].apply(lambda x: prediction_interval(x, polynomial = Newton)[0])\n",
    "df_income[\"HR predicted\"] = df_income[\"REN_RENSF_D\"].apply(lambda x: prediction_interval(x, polynomial = Newton)[1])\n",
    "df_income[\"Upper prediction band\"] = df_income[\"REN_RENSF_D\"].apply(lambda x: prediction_interval(x, polynomial = Newton)[2])\n",
    "df_validate = df_income[['HOMICIDE_RATE', \"REN_RENSF_D\",\"Lower prediction band\",\n",
    "          \"HR predicted\",\n",
    "          \"Upper prediction band\",'FORM_SEC_QUANTILE']].rename(columns = {'REN_RENSF_D': 'Avg. Income in the Formal Sector'}).sort_values(by ='Avg. Income in the Formal Sector')\n",
    "df_validate.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting---------------------------------------\n",
    "\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axis.grid': True})\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "#Scatter\n",
    "plt.plot(X,Y,'o',linewidth = 2.4, markersize = 9, alpha = 0.45, label = 'Cities', c = 'midnightblue')\n",
    "    \n",
    "#Labels\n",
    "plt.xlabel('Average Income In The Formal Sector', fontsize = 14)\n",
    "plt.ylabel('Homicides Rate - 15-29 Years',fontsize = 14)\n",
    "plt.title(' The Relationship Between The Homicides Rate and The Average Income in the formal sector - {} $(Corr = {}$)'.format(year,round(corr_gdp,2)), fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "#Fitting data\n",
    "xplot = np.linspace(X[0],X[-1],500)\n",
    "hplot =np.array([],float)\n",
    "gplot =np.array([],float) # g(x) = a + bx + cx^2\n",
    "pplot = np.array([],float) # polynomial \n",
    "for xi in xplot:\n",
    "    hi = (v/((xi-300)**w)) - 25\n",
    "    hplot = np.append(hplot,hi)\n",
    "    \n",
    "    gi = a + b*x + c*x**2\n",
    "    gplot = np.append(gplot,gi)\n",
    "    \n",
    "    pi = Newton(Xint,Yint,xi)[0]\n",
    "    pplot = np.append(pplot,pi)\n",
    "   \n",
    "\n",
    "#plt.plot(xplot,gplot,'-', linewidth = 2, c= 'crimson', label = '$y = {} + {}x + {}x^2$'.format(round(a[0],2),round(b[0],2),round(c[0],2)))\n",
    "plt.plot(xplot, hplot,'-', linewidth = 2, c= 'goldenrod', label = '$y = [{}/(x-300)^ ({})]-25$'.format(round(v[0],2),round(w[0],2)))\n",
    "plt.plot(xplot, hplot +pplot ,'--', linewidth = 2, c= 'royalblue', label = '$y \\pm P_3(x) \\ {} \\% \\ PI$'.format(conf_level*100))\n",
    "plt.plot(xplot,np.array(list(map(lambda x: x if x >0 else 0,hplot - pplot))) ,'--', linewidth = 2, c= 'royalblue')\n",
    "\n",
    "#Legend\n",
    "plt.legend(loc = 'best', shadow = False, frameon = True, framealpha = 0.8)\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(13,7)\n",
    "plt.setp(legend.get_texts(), color = 'white')\n",
    "plt.xticks(fontsize = 13)\n",
    "plt.yticks(fontsize = 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting---------------------------------------\n",
    "\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axis.grid': True})\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "#Scatter\n",
    "plt.plot(X,Y,'o',linewidth = 2.4, markersize = 9, alpha = 0.45, label = 'Cities', c = 'midnightblue')\n",
    "    \n",
    "#Labels\n",
    "plt.xlabel('Average Income In The Formal Sector', fontsize = 14)\n",
    "plt.ylabel('Homicides Rate - 15-29 Years',fontsize = 14)\n",
    "plt.title(' The Relationship Between The Homicides Rate and The Average Income in the formal sector - {} $(Corr = {}$)'.format(year,round(corr_gdp,2)), fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "#Fitting data\n",
    "xplot = np.linspace(X[0],X[-1],500)\n",
    "hplot =np.array([],float)\n",
    "gplot =np.array([],float) # g(x) = a + bx + cx^2\n",
    "pplot = np.array([],float) # polynomial \n",
    "for xi in xplot:\n",
    "    hi = (v/((xi-300)**w)) - 25\n",
    "    hplot = np.append(hplot,hi)\n",
    "    \n",
    "    gi = a + b*x + c*x**2\n",
    "    gplot = np.append(gplot,gi)\n",
    "    \n",
    "    pi = Newton(Xint,Yint,xi)[0]\n",
    "    pplot = np.append(pplot,pi)\n",
    "   \n",
    "\n",
    "#plt.plot(xplot,gplot,'-', linewidth = 2, c= 'crimson', label = '$y = {} + {}x + {}x^2$'.format(round(a[0],2),round(b[0],2),round(c[0],2)))\n",
    "plt.plot(xplot, hplot,'-', linewidth = 2, c= 'goldenrod', label = '$y = [{}/(x-300)^ ({})]-25$'.format(round(v[0],2),round(w[0],2)))\n",
    "plt.plot(xplot, hplot +pplot ,'--', linewidth = 2, c= 'royalblue', label = '$y \\pm P_3(x) \\ {} \\% \\ PI$'.format(conf_level*100))\n",
    "plt.plot(xplot,np.array(list(map(lambda x: x if x >0 else 0,hplot - pplot))) ,'--', linewidth = 2, c= 'royalblue')\n",
    "\n",
    "#Legend\n",
    "legend = plt.legend(loc = 'best', shadow = False, frameon = True, framealpha = 0.8)\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(13,7)\n",
    "plt.setp(legend.get_texts(), color = 'white')\n",
    "plt.xticks(fontsize = 13)\n",
    "plt.yticks(fontsize = 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting---------------------------------------\n",
    "\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axis.grid': True})\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "#Scatter\n",
    "plt.plot(X,Y,'o',linewidth = 2.4, markersize = 9, alpha = 0.65, label = 'Cities', c = 'midnightblue')\n",
    "    \n",
    "#Labels\n",
    "plt.xlabel('Average Income In The Formal Sector', fontsize = 14)\n",
    "plt.ylabel('Homicides Rate - 15-29 Years',fontsize = 14)\n",
    "plt.title(' The Relationship Between The Homicides Rate and The Average Income in the formal sector - {} $(Corr = {}$)'.format(year,round(corr_gdp,2)), fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "#Fitting data\n",
    "xplot = np.linspace(X[0],X[-1],500)\n",
    "hplot =np.array([],float)\n",
    "gplot =np.array([],float) # g(x) = a + bx + cx^2\n",
    "pplot = np.array([],float) # polynomial \n",
    "for xi in xplot:\n",
    "    hi = (v/((xi-300)**w)) - 25\n",
    "    hplot = np.append(hplot,hi)\n",
    "    \n",
    "    gi = a + b*x + c*x**2\n",
    "    gplot = np.append(gplot,gi)\n",
    "    \n",
    "    pi = Newton(Xint,Yint,xi)[0]\n",
    "    pplot = np.append(pplot,pi)\n",
    "   \n",
    "\n",
    "#plt.plot(xplot,gplot,'-', linewidth = 2, c= 'crimson', label = '$y = {} + {}x + {}x^2$'.format(round(a[0],2),round(b[0],2),round(c[0],2)))\n",
    "plt.plot(xplot, hplot,'-', linewidth = 2, c= 'goldenrod', label = '$y = [{}/(x-300)^ ({})]-25$'.format(round(v[0],2),round(w[0],2)))\n",
    "plt.plot(xplot, hplot +pplot ,'--', linewidth = 2, c= 'royalblue', label = '$y \\pm P_3(x) \\ {} \\% \\ PI$'.format(conf_level*100))\n",
    "plt.plot(xplot,np.array(list(map(lambda x: x if x >0 else 0,hplot - pplot))) ,'--', linewidth = 2, c= 'royalblue')\n",
    "\n",
    "#Legend\n",
    "legend = plt.legend(loc = 'best', shadow = False, frameon = True, framealpha = 0.8)\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(13,7)\n",
    "plt.setp(legend.get_texts(), color = 'white')\n",
    "plt.xticks(fontsize = 13)\n",
    "plt.yticks(fontsize = 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting---------------------------------------\n",
    "\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axis.grid': True})\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "#Scatter\n",
    "plt.plot(X,Y,'o',linewidth = 2.4, markersize = 9, alpha = 0.65, label = 'Cities', c = 'midnightblue')\n",
    "    \n",
    "#Labels\n",
    "plt.xlabel('Average Income In The Formal Sector', fontsize = 14)\n",
    "plt.ylabel('Homicides Rate - 15-29 Years',fontsize = 14)\n",
    "plt.title(' The Relationship Between The Homicides Rate and The Average Income in the formal sector - {} $(Corr = {}$)'.format(year,round(corr_gdp,2)), fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "#Fitting data\n",
    "xplot = np.linspace(X[0],X[-1],500)\n",
    "hplot =np.array([],float)\n",
    "gplot =np.array([],float) # g(x) = a + bx + cx^2\n",
    "pplot = np.array([],float) # polynomial \n",
    "for xi in xplot:\n",
    "    hi = (v/((xi-300)**w)) - 25\n",
    "    hplot = np.append(hplot,hi)\n",
    "    \n",
    "    gi = a + b*x + c*x**2\n",
    "    gplot = np.append(gplot,gi)\n",
    "    \n",
    "    pi = Newton(Xint,Yint,xi)[0]\n",
    "    pplot = np.append(pplot,pi)\n",
    "   \n",
    "\n",
    "#plt.plot(xplot,gplot,'-', linewidth = 2, c= 'crimson', label = '$y = {} + {}x + {}x^2$'.format(round(a[0],2),round(b[0],2),round(c[0],2)))\n",
    "plt.plot(xplot, hplot,'-', linewidth = 2, c= 'goldenrod', label = '$y = [{}/(x-300)^ ({})]-25$'.format(round(v[0],2),round(w[0],2)))\n",
    "plt.plot(xplot, hplot +pplot ,'--', linewidth = 2, c= 'royalblue', label = '$y \\pm P_3(x) \\ {} \\% \\ PI$'.format(conf_level*100))\n",
    "plt.plot(xplot,np.array(list(map(lambda x: x if x >0 else 0,hplot - pplot))) ,'--', linewidth = 2, c= 'royalblue')\n",
    "\n",
    "#Legend\n",
    "legend = plt.legend(loc = 'best', shadow = False, frameon = True, framealpha = 0.8)\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(13,7)\n",
    "plt.setp(legend.get_texts(), color = 'white')\n",
    "plt.xticks(fontsize = 13)\n",
    "plt.yticks(fontsize = 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting---------------------------------------\n",
    "\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axis.grid': True})\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "#Scatter\n",
    "plt.plot(X,Y,'o',linewidth = 2.4, markersize = 9, alpha = 0.65, label = 'Cities', c = 'midnightblue')\n",
    "    \n",
    "#Labels\n",
    "plt.xlabel('Average Income In The Formal Sector', fontsize = 14)\n",
    "plt.ylabel('Homicides Rate - 15-29 Years',fontsize = 14)\n",
    "plt.title(' The Relationship Between The Homicides Rate and The Average Income in the formal sector - {} $(Corr = {}$)'.format(year,round(corr_gdp,2)), fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "#Fitting data\n",
    "xplot = np.linspace(X[0],X[-1],500)\n",
    "hplot =np.array([],float)\n",
    "gplot =np.array([],float) # g(x) = a + bx + cx^2\n",
    "pplot = np.array([],float) # polynomial \n",
    "for xi in xplot:\n",
    "    hi = (v/((xi-300)**w)) - 25\n",
    "    hplot = np.append(hplot,hi)\n",
    "    \n",
    "    gi = a + b*x + c*x**2\n",
    "    gplot = np.append(gplot,gi)\n",
    "    \n",
    "    pi = Newton(Xint,Yint,xi)[0]\n",
    "    pplot = np.append(pplot,pi)\n",
    "   \n",
    "\n",
    "#plt.plot(xplot,gplot,'-', linewidth = 2, c= 'crimson', label = '$y = {} + {}x + {}x^2$'.format(round(a[0],2),round(b[0],2),round(c[0],2)))\n",
    "plt.plot(xplot, hplot,'-', linewidth = 2, c= 'goldenrod', label = '$y = [{}/(x-300)^ ({})]-25$'.format(round(v[0],2),round(w[0],2)))\n",
    "plt.plot(xplot, hplot +pplot ,'--', linewidth = 2, c= 'crimson', label = '$y \\pm P_3(x) \\ {} \\% \\ PI$'.format(conf_level*100))\n",
    "plt.plot(xplot,np.array(list(map(lambda x: x if x >0 else 0,hplot - pplot))) ,'--', linewidth = 2, c= 'royalblue')\n",
    "\n",
    "#Legend\n",
    "legend = plt.legend(loc = 'best', shadow = False, frameon = True, framealpha = 0.8)\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(13,7)\n",
    "plt.setp(legend.get_texts(), color = 'white')\n",
    "plt.xticks(fontsize = 13)\n",
    "plt.yticks(fontsize = 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting---------------------------------------\n",
    "\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axis.grid': True})\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "#Scatter\n",
    "plt.plot(X,Y,'o',linewidth = 2.4, markersize = 9, alpha = 0.65, label = 'Cities', c = 'midnightblue')\n",
    "    \n",
    "#Labels\n",
    "plt.xlabel('Average Income In The Formal Sector', fontsize = 14)\n",
    "plt.ylabel('Homicides Rate - 15-29 Years',fontsize = 14)\n",
    "plt.title(' The Relationship Between The Homicides Rate and The Average Income in the formal sector - {} $(Corr = {}$)'.format(year,round(corr_gdp,2)), fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "#Fitting data\n",
    "xplot = np.linspace(X[0],X[-1],500)\n",
    "hplot =np.array([],float)\n",
    "gplot =np.array([],float) # g(x) = a + bx + cx^2\n",
    "pplot = np.array([],float) # polynomial \n",
    "for xi in xplot:\n",
    "    hi = (v/((xi-300)**w)) - 25\n",
    "    hplot = np.append(hplot,hi)\n",
    "    \n",
    "    gi = a + b*x + c*x**2\n",
    "    gplot = np.append(gplot,gi)\n",
    "    \n",
    "    pi = Newton(Xint,Yint,xi)[0]\n",
    "    pplot = np.append(pplot,pi)\n",
    "   \n",
    "\n",
    "\n",
    "plt.plot(xplot, hplot,'-', linewidth = 2, c= 'goldenrod', label = '$y = [{}/(x-300)^ ({})]-25$'.format(round(v[0],2),round(w[0],2)))\n",
    "plt.plot(xplot, hplot +pplot ,'--', linewidth = 2, c= 'crimson', label = '$y \\pm P_3(x) \\ {} \\% \\ PI$'.format(conf_level*100))\n",
    "plt.plot(xplot,np.array(list(map(lambda x: x if x >0 else 0,hplot - pplot))) ,'--', linewidth = 2, c= 'crimson'\n",
    "\n",
    "#Legend\n",
    "legend = plt.legend(loc = 'best', shadow = False, frameon = True, framealpha = 0.8)\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(13,7)\n",
    "plt.setp(legend.get_texts(), color = 'white')\n",
    "plt.xticks(fontsize = 13)\n",
    "plt.yticks(fontsize = 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting---------------------------------------\n",
    "\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axis.grid': True})\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "#Scatter\n",
    "plt.plot(X,Y,'o',linewidth = 2.4, markersize = 9, alpha = 0.65, label = 'Cities', c = 'midnightblue')\n",
    "    \n",
    "#Labels\n",
    "plt.xlabel('Average Income In The Formal Sector', fontsize = 14)\n",
    "plt.ylabel('Homicides Rate - 15-29 Years',fontsize = 14)\n",
    "plt.title(' The Relationship Between The Homicides Rate and The Average Income in the formal sector - {} $(Corr = {}$)'.format(year,round(corr_gdp,2)), fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "#Fitting data\n",
    "xplot = np.linspace(X[0],X[-1],500)\n",
    "hplot =np.array([],float)\n",
    "gplot =np.array([],float) # g(x) = a + bx + cx^2\n",
    "pplot = np.array([],float) # polynomial \n",
    "for xi in xplot:\n",
    "    hi = (v/((xi-300)**w)) - 25\n",
    "    hplot = np.append(hplot,hi)\n",
    "    \n",
    "    gi = a + b*x + c*x**2\n",
    "    gplot = np.append(gplot,gi)\n",
    "    \n",
    "    pi = Newton(Xint,Yint,xi)[0]\n",
    "    pplot = np.append(pplot,pi)\n",
    "   \n",
    "\n",
    "\n",
    "plt.plot(xplot, hplot,'-', linewidth = 2, c= 'goldenrod', label = '$y = [{}/(x-300)^ ({})]-25$'.format(round(v[0],2),round(w[0],2)))\n",
    "plt.plot(xplot, hplot +pplot ,'--', linewidth = 2, c= 'crimson', label = '$y \\pm P_3(x) \\ {} \\% \\ PI$'.format(conf_level*100))\n",
    "plt.plot(xplot,np.array(list(map(lambda x: x if x >0 else 0,hplot - pplot))) ,'--', linewidth = 2, c= 'crimson')\n",
    "\n",
    "#Legend\n",
    "legend = plt.legend(loc = 'best', shadow = False, frameon = True, framealpha = 0.8)\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(13,7)\n",
    "plt.setp(legend.get_texts(), color = 'white')\n",
    "plt.xticks(fontsize = 13)\n",
    "plt.yticks(fontsize = 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting---------------------------------------\n",
    "\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axis.grid': True})\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "#Scatter\n",
    "plt.plot(X,Y,'o',linewidth = 2.4, markersize = 9, alpha = 0.9, label = 'Cities', c = 'royalblue')\n",
    "    \n",
    "#Labels\n",
    "plt.xlabel('Average Income In The Formal Sector', fontsize = 14)\n",
    "plt.ylabel('Homicides Rate - 15-29 Years',fontsize = 14)\n",
    "plt.title(' The Relationship Between The Homicides Rate and The Average Income in the formal sector - {} $(Corr = {}$)'.format(year,round(corr_gdp,2)), fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "#Fitting data\n",
    "xplot = np.linspace(X[0],X[-1],500)\n",
    "hplot =np.array([],float)\n",
    "gplot =np.array([],float) # g(x) = a + bx + cx^2\n",
    "pplot = np.array([],float) # polynomial \n",
    "for xi in xplot:\n",
    "    hi = (v/((xi-300)**w)) - 25\n",
    "    hplot = np.append(hplot,hi)\n",
    "    \n",
    "    gi = a + b*x + c*x**2\n",
    "    gplot = np.append(gplot,gi)\n",
    "    \n",
    "    pi = Newton(Xint,Yint,xi)[0]\n",
    "    pplot = np.append(pplot,pi)\n",
    "   \n",
    "\n",
    "\n",
    "plt.plot(xplot, hplot,'-', linewidth = 2, c= 'goldenrod', label = '$y = [{}/(x-300)^ ({})]-25$'.format(round(v[0],2),round(w[0],2)))\n",
    "plt.plot(xplot, hplot +pplot ,'--', linewidth = 2, c= 'crimson', label = '$y \\pm P_3(x) \\ {} \\% \\ PI$'.format(conf_level*100))\n",
    "plt.plot(xplot,np.array(list(map(lambda x: x if x >0 else 0,hplot - pplot))) ,'--', linewidth = 2, c= 'crimson')\n",
    "\n",
    "#Legend\n",
    "legend = plt.legend(loc = 'best', shadow = False, frameon = True, framealpha = 0.8)\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(13,7)\n",
    "plt.setp(legend.get_texts(), color = 'white')\n",
    "plt.xticks(fontsize = 13)\n",
    "plt.yticks(fontsize = 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting---------------------------------------\n",
    "\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axis.grid': True})\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "#Scatter\n",
    "plt.plot(X,Y,'o',linewidth = 2.4, markersize = 9, alpha = 0.9, label = 'Cities', c = 'royalblue')\n",
    "    \n",
    "#Labels\n",
    "plt.xlabel('Average Income In The Formal Sector', fontsize = 14)\n",
    "plt.ylabel('Homicides Rate - 15-29 Years',fontsize = 14)\n",
    "plt.title(' The Relationship Between The Homicides Rate and The Average Income in the formal sector - {} $(Corr = {}$)'.format(year,round(corr_gdp,2)), fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "#Fitting data\n",
    "xplot = np.linspace(X[0],X[-1],500)\n",
    "hplot =np.array([],float)\n",
    "gplot =np.array([],float) # g(x) = a + bx + cx^2\n",
    "pplot = np.array([],float) # polynomial \n",
    "for xi in xplot:\n",
    "    hi = (v/((xi-300)**w)) - 25\n",
    "    hplot = np.append(hplot,hi)\n",
    "    \n",
    "    gi = a + b*x + c*x**2\n",
    "    gplot = np.append(gplot,gi)\n",
    "    \n",
    "    pi = Newton(Xint,Yint,xi)[0]\n",
    "    pplot = np.append(pplot,pi)\n",
    "   \n",
    "\n",
    "\n",
    "plt.plot(xplot, hplot,'-', linewidth = 2, c= 'crimson', label = '$y = [{}/(x-300)^ ({})]-25$'.format(round(v[0],2),round(w[0],2)))\n",
    "plt.plot(xplot, hplot +pplot ,'--', linewidth = 2, c= 'goldenrod', label = '$y \\pm P_3(x) \\ {} \\% \\ PI$'.format(conf_level*100))\n",
    "plt.plot(xplot,np.array(list(map(lambda x: x if x >0 else 0,hplot - pplot))) ,'--', linewidth = 2, c= 'goldenrod')\n",
    "\n",
    "#Legend\n",
    "legend = plt.legend(loc = 'best', shadow = False, frameon = True, framealpha = 0.8)\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(13,7)\n",
    "plt.setp(legend.get_texts(), color = 'white')\n",
    "plt.xticks(fontsize = 13)\n",
    "plt.yticks(fontsize = 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "df_income.plot(kind =\"scatter\", x= \"REN_PIBPC_D\", y = 'HOMICIDE_RATE' , c='REN_RENSF_D', colormap='viridis',figsize = (12,6), linewidth = 6)\n",
    "\n",
    "plt.xlabel('GDP per Capita')\n",
    "plt.ylabel('15-29 Years Homicides Rate')\n",
    "plt.title('Homicide rate X GDP per capita X Average Income in the formal sector', fontweight = 'bold')\n",
    "plt.gcf().set_size_inches(12,6)\n",
    "plt.gcf().set_dpi(100)\n",
    "#plt.subplots_adjust(bottom = -.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "def scatter_3_var(var_name,label_name,corr_name):\n",
    "    fig, ((ax1,ax2,ax3),(ax4,ax5,ax6),(ax7,ax8,ax9),(ax10,ax11,ax12), (ax13,ax14,ax15)) = plt.subplots(5,3, sharey = True)\n",
    "    axes = [ax1,ax2,ax3,ax4,ax5,ax6,ax7,ax8,ax9,ax10,ax11,ax12,ax13,ax14,ax15]\n",
    "    columns = list(df_income.columns)\n",
    "    columns.remove(\"HOMICIDE_RATE\")\n",
    "\n",
    "    for col,ax in zip(columns,axes):\n",
    "\n",
    "        #Pearson correlation\n",
    "        corr_gdp = round(df_income[var_name].corr(df_income[col]),2)\n",
    "        corr_hr = round(df_income[\"HOMICIDE_RATE\"].corr(df_income[col]),2)\n",
    "\n",
    "        #Plotting\n",
    "        scatter = ax.scatter(x= df_income[var_name], y = df_income['HOMICIDE_RATE'] , c = df_income[col], linewidth = 6, cmap = 'viridis', label = \"${} \\\\rho ={}   \\\\ HR \\\\rho = {}$\".format(corr_name,corr_gdp,corr_hr))\n",
    "        fig.colorbar(mappable = scatter,ax =ax)\n",
    "\n",
    "        #labels\n",
    "        ax.set_xlabel(label_name, fontsize = 15)\n",
    "        ax.set_ylabel('15-29 Years Homicide Rate', fontsize = 15)\n",
    "        ax.set_title(\"{}\".format(dict_metric[col]) ,size = 15, fontweight = 'bold')\n",
    "        ax.legend(loc = 'best')\n",
    "\n",
    "    #Setting\n",
    "    plt.gcf().set_size_inches(27,18)\n",
    "    plt.gcf().set_dpi(150)\n",
    "    plt.subplots_adjust(bottom = -0.8)\n",
    "    plt.xticks(fontsize = 12)\n",
    "    plt.yticks(fontsize = 12)\n",
    "    #plt.savefig('Correlations_Income.pdf', quality = 97, optimize = True)\n",
    "\n",
    "scatter_3_var(\"REN_PIBPC_D\",\"GDP Per Capita\",'GDP')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "def scatter_3_var(var_name,label_name,corr_name):\n",
    "    fig, ((ax1,ax2,ax3),(ax4,ax5,ax6),(ax7,ax8,ax9),(ax10,ax11,ax12), (ax13,ax14,ax15)) = plt.subplots(5,3, sharey = True)\n",
    "    axes = [ax1,ax2,ax3,ax4,ax5,ax6,ax7,ax8,ax9,ax10,ax11,ax12,ax13,ax14,ax15]\n",
    "    columns = list(df_income.columns)\n",
    "    columns.remove(\"HOMICIDE_RATE\")\n",
    "\n",
    "    for col,ax in zip(columns,axes):\n",
    "\n",
    "        #Pearson correlation\n",
    "        corr_gdp = round(df_income[var_name].corr(df_income[col]),2)\n",
    "        corr_hr = round(df_income[\"HOMICIDE_RATE\"].corr(df_income[col]),2)\n",
    "\n",
    "        #Plotting\n",
    "        scatter = ax.scatter(x= df_income[var_name], y = df_income['HOMICIDE_RATE'] , c = df_income[col], linewidth = 6, cmap = 'viridis', label = \"${} \\\\rho ={}   \\\\ HR \\\\rho = {}$\".format(corr_name,corr_gdp,corr_hr))\n",
    "        fig.colorbar(mappable = scatter,ax =ax)\n",
    "\n",
    "        #labels\n",
    "        ax.set_xlabel(label_name, fontsize = 15)\n",
    "        ax.set_ylabel('15-29 Years Homicide Rate', fontsize = 15)\n",
    "        ax.set_title(\"{}\".format(dict_metric[col]) ,size = 15, fontweight = 'bold')\n",
    "        legend = ax.legend(loc = 'best')\n",
    "        plt.setp(legend.get_texts(), color = 'white')\n",
    "\n",
    "    #Setting\n",
    "    plt.gcf().set_size_inches(27,18)\n",
    "    plt.gcf().set_dpi(150)\n",
    "    plt.subplots_adjust(bottom = -0.8)\n",
    "    plt.xticks(fontsize = 12)\n",
    "    plt.yticks(fontsize = 12)\n",
    "    #plt.savefig('Correlations_Income.pdf', quality = 97, optimize = True)\n",
    "\n",
    "scatter_3_var(\"REN_PIBPC_D\",\"GDP Per Capita\",'GDP')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "fig, ((ax1,ax2,ax3),(ax4,ax5,ax6),(ax7,ax8,ax9),(ax10,ax11,ax12), (ax13,ax14,ax15)) = plt.subplots(5,3, sharey = True)\n",
    "axes = [ax1,ax2,ax3,ax4,ax5,ax6,ax7,ax8,ax9,ax10,ax11,ax12,ax13, ax14, ax15]\n",
    "columns = list(df_income.columns)\n",
    "columns.remove(\"HOMICIDE_RATE\")\n",
    "\n",
    "for col,ax in zip(columns,axes):\n",
    "    \n",
    "    #pearson correlation\n",
    "    corr = df_income[\"HOMICIDE_RATE\"].corr(df_income[col], method = 'pearson')\n",
    "    #Plotting\n",
    "    ax.plot(df_income[col], df_income['HOMICIDE_RATE'],'o',color =  'midnightblue', markersize = 9, alpha = 0.6)\n",
    "    ax.set_xlabel(dict_metric[col], fontsize = 15)\n",
    "    ax.set_ylabel('14-29 Years Homicide Rate', fontsize = 15)\n",
    "    ax.set_title(\"{} X Homicide Rate - Corr: {}\".format(col,round(corr,2)) ,size = 15, fontweight = 'bold')\n",
    "       \n",
    "    \n",
    "#Setting\n",
    "plt.gcf().set_size_inches(24,18)\n",
    "plt.gcf().set_dpi(150)\n",
    "plt.subplots_adjust(bottom = -0.8)\n",
    "plt.xticks(fontsize = 12)\n",
    "plt.yticks(fontsize = 12)\n",
    "#plt.savefig('Correlations_Income.pdf', quality = 97, optimize = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "fig, ((ax1,ax2,ax3),(ax4,ax5,ax6),(ax7,ax8,ax9),(ax10,ax11,ax12), (ax13,ax14,ax15)) = plt.subplots(5,3, sharey = True)\n",
    "axes = [ax1,ax2,ax3,ax4,ax5,ax6,ax7,ax8,ax9,ax10,ax11,ax12,ax13, ax14, ax15]\n",
    "columns = list(df_income.columns)\n",
    "columns.remove(\"HOMICIDE_RATE\")\n",
    "\n",
    "for col,ax in zip(columns,axes):\n",
    "    \n",
    "    #pearson correlation\n",
    "    corr = df_income[\"HOMICIDE_RATE\"].corr(df_income[col], method = 'pearson')\n",
    "    #Plotting\n",
    "    ax.plot(df_income[col], df_income['HOMICIDE_RATE'],'o',color =  'royalblue', markersize = 9, alpha = 0.6)\n",
    "    ax.set_xlabel(dict_metric[col], fontsize = 15)\n",
    "    ax.set_ylabel('14-29 Years Homicide Rate', fontsize = 15)\n",
    "    ax.set_title(\"{} X Homicide Rate - Corr: {}\".format(col,round(corr,2)) ,size = 15, fontweight = 'bold')\n",
    "       \n",
    "    \n",
    "#Setting\n",
    "plt.gcf().set_size_inches(24,18)\n",
    "plt.gcf().set_dpi(150)\n",
    "plt.subplots_adjust(bottom = -0.8)\n",
    "plt.xticks(fontsize = 12)\n",
    "plt.yticks(fontsize = 12)\n",
    "#plt.savefig('Correlations_Income.pdf', quality = 97, optimize = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "fig, ((ax1,ax2,ax3),(ax4,ax5,ax6),(ax7,ax8,ax9),(ax10,ax11,ax12), (ax13,ax14,ax15)) = plt.subplots(5,3, sharey = True)\n",
    "axes = [ax1,ax2,ax3,ax4,ax5,ax6,ax7,ax8,ax9,ax10,ax11,ax12,ax13, ax14, ax15]\n",
    "columns = list(df_income.columns)\n",
    "columns.remove(\"HOMICIDE_RATE\")\n",
    "\n",
    "for col,ax in zip(columns,axes):\n",
    "    \n",
    "    #pearson correlation\n",
    "    corr = df_income[\"HOMICIDE_RATE\"].corr(df_income[col], method = 'pearson')\n",
    "    #Plotting\n",
    "    ax.plot(df_income[col], df_income['HOMICIDE_RATE'],'o',color =  'royalblue', markersize = 9, alpha = 0.8)\n",
    "    ax.set_xlabel(dict_metric[col], fontsize = 15)\n",
    "    ax.set_ylabel('14-29 Years Homicide Rate', fontsize = 15)\n",
    "    ax.set_title(\"{} X Homicide Rate - Corr: {}\".format(col,round(corr,2)) ,size = 15, fontweight = 'bold')\n",
    "       \n",
    "    \n",
    "#Setting\n",
    "plt.gcf().set_size_inches(24,18)\n",
    "plt.gcf().set_dpi(150)\n",
    "plt.subplots_adjust(bottom = -0.8)\n",
    "plt.xticks(fontsize = 12)\n",
    "plt.yticks(fontsize = 12)\n",
    "#plt.savefig('Correlations_Income.pdf', quality = 97, optimize = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "scatter_3_var('REN_RENSF_D',\"Average income in the formal sector\",'IFS')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_box(dataset,x,y,xlabel,ylabel,title):\n",
    "    #plotting a box-splot chart\n",
    "    sea.set_style('darkgrid', {'axes.grid': True})\n",
    "    plt.figure()\n",
    "    box = sea.boxplot(data = dataset, x = x, y =y, palette = \"GnBu_r\", orient = \"v\", linewidth = 0.5, saturation= 0.56, fliersize= 0)\n",
    "    swarm = sea.swarmplot(data = dataset, x = x, y = y, palette = 'GnBu_r', orient = 'v', size = 7,alpha= 1, edgecolor= 'grey')\n",
    "    plt.xlabel(xlabel,fontsize = 14)\n",
    "    plt.ylabel(ylabel, fontsize = 14)\n",
    "    #box.set(xlabel = \"Performance (%)\", ylabel = \"School\")\n",
    "    plt.title(title, fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "\n",
    "    #Adjusts\n",
    "    plt.gcf().set_size_inches(17,8)\n",
    "    plt.gcf().set_dpi(100)\n",
    "    plt.xticks(rotation = 35)\n",
    "    #plt.subplots_adjust(left = 0.4)b\n",
    "plot_box(df_income.sort_values(by =\"REN_RENSF_D\", ascending = True), y = \"HOMICIDE_RATE\", x = 'FORM_SEC_QUANTILE',xlabel = \"Average Income in the formal sector\", ylabel =  \"15-29 Years Homicide Rate\", title = \"Box-Plot:Average Income in the formal sector X Homicide Rate\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_box(dataset,x,y,xlabel,ylabel,title):\n",
    "    #plotting a box-splot chart\n",
    "    sea.set_style('darkgrid', {'axes.grid': True})\n",
    "    plt.figure()\n",
    "    box = sea.boxplot(data = dataset, x = x, y =y, palette = \"GnBu_r\", orient = \"v\", linewidth = 0.5, saturation= 0.56, fliersize= 0)\n",
    "    swarm = sea.swarmplot(data = dataset, x = x, y = y, palette = 'GnBu_r', orient = 'v', size = 7,alpha= 1, edgecolor= 'grey')\n",
    "    plt.xlabel(xlabel,fontsize = 14)\n",
    "    plt.ylabel(ylabel, fontsize = 14)\n",
    "    #box.set(xlabel = \"Performance (%)\", ylabel = \"School\")\n",
    "    plt.title(title, fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "\n",
    "    #Adjusts\n",
    "    plt.gcf().set_size_inches(17,8)\n",
    "    plt.gcf().set_dpi(100)\n",
    "    plt.xticks(rotation = 35)\n",
    "    #plt.subplots_adjust(left = 0.4)b\n",
    "plot_box(df_income.sort_values(by =\"REN_RENSF_D\", ascending = True), y = \"HOMICIDE_RATE\", x = 'FORM_SEC_QUANTILE',xlabel = \"Average Income in the formal sector\", ylabel =  \"15-29 Years Homicide Rate\", title = \"Box-Plot:Average Income in the formal sector X Homicide Rate\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_box(dataset,x,y,xlabel,ylabel,title):\n",
    "    #plotting a box-splot chart\n",
    "    sea.set_style('darkgrid', {'axes.grid': True})\n",
    "    sea.set(rc = {'axes.facecolor':'black'} )\n",
    "    plt.figure()\n",
    "    box = sea.boxplot(data = dataset, x = x, y =y, palette = \"GnBu_r\", orient = \"v\", linewidth = 0.5, saturation= 0.56, fliersize= 0)\n",
    "    swarm = sea.swarmplot(data = dataset, x = x, y = y, palette = 'GnBu_r', orient = 'v', size = 7,alpha= 1, edgecolor= 'grey')\n",
    "    plt.xlabel(xlabel,fontsize = 14)\n",
    "    plt.ylabel(ylabel, fontsize = 14)\n",
    "    #box.set(xlabel = \"Performance (%)\", ylabel = \"School\")\n",
    "    plt.title(title, fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "\n",
    "    #Adjusts\n",
    "    plt.gcf().set_size_inches(17,8)\n",
    "    plt.gcf().set_dpi(100)\n",
    "    plt.xticks(rotation = 35)\n",
    "    #plt.subplots_adjust(left = 0.4)b\n",
    "plot_box(df_income.sort_values(by =\"REN_RENSF_D\", ascending = True), y = \"HOMICIDE_RATE\", x = 'FORM_SEC_QUANTILE',xlabel = \"Average Income in the formal sector\", ylabel =  \"15-29 Years Homicide Rate\", title = \"Box-Plot:Average Income in the formal sector X Homicide Rate\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_box(dataset,x,y,xlabel,ylabel,title):\n",
    "    #plotting a box-splot chart\n",
    "    sea.set_style('darkgrid', {'axes.grid': True})\n",
    "    sea.set(rc = {'axes.facecolor':'black'} )\n",
    "    plt.figure()\n",
    "    box = sea.boxplot(data = dataset, x = x, y =y, palette = \"GnBu_r\", orient = \"v\", linewidth = 1, saturation= 0.56, fliersize= 0)\n",
    "    swarm = sea.swarmplot(data = dataset, x = x, y = y, palette = 'GnBu_r', orient = 'v', size = 7,alpha= 1, edgecolor= 'grey')\n",
    "    plt.xlabel(xlabel,fontsize = 14)\n",
    "    plt.ylabel(ylabel, fontsize = 14)\n",
    "    #box.set(xlabel = \"Performance (%)\", ylabel = \"School\")\n",
    "    plt.title(title, fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "\n",
    "    #Adjusts\n",
    "    plt.gcf().set_size_inches(17,8)\n",
    "    plt.gcf().set_dpi(100)\n",
    "    plt.xticks(rotation = 35)\n",
    "    #plt.subplots_adjust(left = 0.4)b\n",
    "plot_box(df_income.sort_values(by =\"REN_RENSF_D\", ascending = True), y = \"HOMICIDE_RATE\", x = 'FORM_SEC_QUANTILE',xlabel = \"Average Income in the formal sector\", ylabel =  \"15-29 Years Homicide Rate\", title = \"Box-Plot:Average Income in the formal sector X Homicide Rate\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_box(dataset,x,y,xlabel,ylabel,title):\n",
    "    #plotting a box-splot chart\n",
    "    sea.set_style('darkgrid', {'axes.grid': True})\n",
    "    plt.figure()\n",
    "    box = sea.boxplot(data = dataset, x = x, y =y, palette = \"GnBu_r\", orient = \"v\", linewidth = 1, saturation= 0.56, fliersize= 0)\n",
    "    swarm = sea.swarmplot(data = dataset, x = x, y = y, palette = 'GnBu_r', orient = 'v', size = 7,alpha= 1, edgecolor= 'grey')\n",
    "    plt.xlabel(xlabel,fontsize = 14)\n",
    "    plt.ylabel(ylabel, fontsize = 14)\n",
    "    #box.set(xlabel = \"Performance (%)\", ylabel = \"School\")\n",
    "    plt.title(title, fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "\n",
    "    #Adjusts\n",
    "    plt.gcf().set_size_inches(17,8)\n",
    "    plt.gcf().set_dpi(100)\n",
    "    plt.xticks(rotation = 35)\n",
    "    #plt.subplots_adjust(left = 0.4)b\n",
    "plot_box(df_income.sort_values(by =\"REN_RENSF_D\", ascending = True), y = \"HOMICIDE_RATE\", x = 'FORM_SEC_QUANTILE',xlabel = \"Average Income in the formal sector\", ylabel =  \"15-29 Years Homicide Rate\", title = \"Box-Plot:Average Income in the formal sector X Homicide Rate\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Homicide rate distribution\n",
    "plt.figure()\n",
    "plt.hist(df_income['HOMICIDE_RATE'], bins = 30, density = 'True', facecolor = 'midnightblue', alpha = 0.85)\n",
    "sea.kdeplot(df_income['HOMICIDE_RATE'], color = 'red', alpha = 0.8)\n",
    "\n",
    "#Label\n",
    "plt.ylabel('Frequency', fontsize = 12)\n",
    "plt.xlabel('14-29 Years Homicide Rate', fontsize = 12)\n",
    "plt.title('Homicide Rate Distribution', fontsize = 12, fontweight = 'bold')\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(14,7.5)\n",
    "plt.gcf().set_dpi(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Homicide rate distribution\n",
    "plt.figure()\n",
    "ea.set(rc = {'axes.facecolor':'black'} )\n",
    "plt.hist(df_income['HOMICIDE_RATE'], bins = 30, density = 'True', facecolor = 'midnightblue', alpha = 0.85)\n",
    "sea.kdeplot(df_income['HOMICIDE_RATE'], color = 'red', alpha = 0.8)\n",
    "\n",
    "#Label\n",
    "plt.ylabel('Frequency', fontsize = 12)\n",
    "plt.xlabel('14-29 Years Homicide Rate', fontsize = 12)\n",
    "plt.title('Homicide Rate Distribution', fontsize = 12, fontweight = 'bold')\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(14,7.5)\n",
    "plt.gcf().set_dpi(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Homicide rate distribution\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "plt.hist(df_income['HOMICIDE_RATE'], bins = 30, density = 'True', facecolor = 'midnightblue', alpha = 0.85)\n",
    "sea.kdeplot(df_income['HOMICIDE_RATE'], color = 'red', alpha = 0.8)\n",
    "\n",
    "#Label\n",
    "plt.ylabel('Frequency', fontsize = 12)\n",
    "plt.xlabel('14-29 Years Homicide Rate', fontsize = 12)\n",
    "plt.title('Homicide Rate Distribution', fontsize = 12, fontweight = 'bold')\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(14,7.5)\n",
    "plt.gcf().set_dpi(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Homicide rate distribution\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "plt.hist(df_income['HOMICIDE_RATE'], bins = 30, density = 'True', facecolor = 'midnightblue', alpha = 0.85)\n",
    "sea.kdeplot(df_income['HOMICIDE_RATE'], color = 'red', alpha = 0.9)\n",
    "\n",
    "#Label\n",
    "plt.ylabel('Frequency', fontsize = 12)\n",
    "plt.xlabel('14-29 Years Homicide Rate', fontsize = 12)\n",
    "plt.title('Homicide Rate Distribution', fontsize = 12, fontweight = 'bold')\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(14,7.5)\n",
    "plt.gcf().set_dpi(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Homicide rate distribution\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "plt.hist(df_income['HOMICIDE_RATE'], bins = 30, density = 'True', facecolor = 'midnightblue', alpha = 0.85)\n",
    "sea.kdeplot(df_income['HOMICIDE_RATE'], color = 'red', alpha = 1)\n",
    "\n",
    "#Label\n",
    "plt.ylabel('Frequency', fontsize = 12)\n",
    "plt.xlabel('14-29 Years Homicide Rate', fontsize = 12)\n",
    "plt.title('Homicide Rate Distribution', fontsize = 12, fontweight = 'bold')\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(14,7.5)\n",
    "plt.gcf().set_dpi(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Homicide rate distribution\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "plt.hist(df_income['HOMICIDE_RATE'], bins = 30, density = 'True', facecolor = 'midnightblue', alpha = 0.85)\n",
    "sea.kdeplot(df_income['HOMICIDE_RATE'], color = 'red', alpha = 1)\n",
    "\n",
    "#Label\n",
    "plt.ylabel('Frequency', fontsize = 12)\n",
    "plt.xlabel('14-29 Years Homicide Rate', fontsize = 12)\n",
    "plt.title('Homicide Rate Distribution', fontsize = 12, fontweight = 'bold')\n",
    "legend = plt.legend('distribution')\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(14,7.5)\n",
    "plt.gcf().set_dpi(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Homicide rate distribution\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "plt.hist(df_income['HOMICIDE_RATE'], bins = 30, density = 'True', facecolor = 'midnightblue', alpha = 0.85)\n",
    "sea.kdeplot(df_income['HOMICIDE_RATE'], color = 'red', alpha = 1)\n",
    "\n",
    "#Label\n",
    "plt.ylabel('Frequency', fontsize = 12)\n",
    "plt.xlabel('14-29 Years Homicide Rate', fontsize = 12)\n",
    "plt.title('Homicide Rate Distribution', fontsize = 12, fontweight = 'bold')\n",
    "legend = plt.legend(loc = 'best')\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(14,7.5)\n",
    "plt.gcf().set_dpi(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Homicide rate distribution\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "plt.hist(df_income['HOMICIDE_RATE'], bins = 30, density = 'True', facecolor = 'midnightblue', alpha = 0.85)\n",
    "sea.kdeplot(df_income['HOMICIDE_RATE'], color = 'red', alpha = 1)\n",
    "\n",
    "#Label\n",
    "plt.ylabel('Frequency', fontsize = 12)\n",
    "plt.xlabel('14-29 Years Homicide Rate', fontsize = 12)\n",
    "plt.title('Homicide Rate Distribution', fontsize = 12, fontweight = 'bold')\n",
    "legend = plt.legend(loc = 'best')\n",
    "plt.setp(legend.get_text(), color = 'white')\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(14,7.5)\n",
    "plt.gcf().set_dpi(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Homicide rate distribution\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "plt.hist(df_income['HOMICIDE_RATE'], bins = 30, density = 'True', facecolor = 'midnightblue', alpha = 0.85)\n",
    "sea.kdeplot(df_income['HOMICIDE_RATE'], color = 'red', alpha = 1)\n",
    "\n",
    "#Label\n",
    "plt.ylabel('Frequency', fontsize = 12)\n",
    "plt.xlabel('14-29 Years Homicide Rate', fontsize = 12)\n",
    "plt.title('Homicide Rate Distribution', fontsize = 12, fontweight = 'bold')\n",
    "legend = plt.legend(loc = 'best')\n",
    "plt.setp(legend.get_texts(), color = 'white')\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(14,7.5)\n",
    "plt.gcf().set_dpi(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting---------------------------------------\n",
    "\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axis.grid': True})\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "#Scatter\n",
    "plt.plot(X,Y,'o',linewidth = 2.4, markersize = 9, alpha = 0.9, label = 'Cities', c = 'royalblue')\n",
    "    \n",
    "#Labels\n",
    "plt.xlabel('Average Income In The Formal Sector', fontsize = 14)\n",
    "plt.ylabel('Homicides Rate - 15-29 Years',fontsize = 14)\n",
    "plt.title(' The Relationship Between The Homicides Rate and The Average Income in the formal sector - {} $(Corr = {}$)'.format(year,round(corr_gdp,2)), fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "#Fitting data\n",
    "xplot = np.linspace(X[0],X[-1],500)\n",
    "hplot =np.array([],float)\n",
    "gplot =np.array([],float) # g(x) = a + bx + cx^2\n",
    "pplot = np.array([],float) # polynomial \n",
    "for xi in xplot:\n",
    "    hi = (v/((xi-300)**w)) - 25\n",
    "    hplot = np.append(hplot,hi)\n",
    "    \n",
    "    gi = a + b*x + c*x**2\n",
    "    gplot = np.append(gplot,gi)\n",
    "    \n",
    "    pi = Newton(Xint,Yint,xi)[0]\n",
    "    pplot = np.append(pplot,pi)\n",
    "   \n",
    "\n",
    "\n",
    "plt.plot(xplot, hplot,'-', linewidth = 2, c= 'crimson', label = '$y = [{}/(x-300)^ ({})]-25$'.format(round(v[0],2),round(w[0],2)))\n",
    "plt.plot(xplot, hplot +pplot ,'--', linewidth = 2, c= 'forestgreen', label = '$y \\pm P_3(x) \\ {} \\% \\ PI$'.format(conf_level*100))\n",
    "plt.plot(xplot,np.array(list(map(lambda x: x if x >0 else 0,hplot - pplot))) ,'--', linewidth = 2, c= 'goldenrod')\n",
    "\n",
    "#Legend\n",
    "legend = plt.legend(loc = 'best', shadow = False, frameon = True, framealpha = 0.8)\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(13,7)\n",
    "plt.setp(legend.get_texts(), color = 'white')\n",
    "plt.xticks(fontsize = 13)\n",
    "plt.yticks(fontsize = 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting---------------------------------------\n",
    "\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axis.grid': True})\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "#Scatter\n",
    "plt.plot(X,Y,'o',linewidth = 2.4, markersize = 9, alpha = 0.9, label = 'Cities', c = 'royalblue')\n",
    "    \n",
    "#Labels\n",
    "plt.xlabel('Average Income In The Formal Sector', fontsize = 14)\n",
    "plt.ylabel('Homicides Rate - 15-29 Years',fontsize = 14)\n",
    "plt.title(' The Relationship Between The Homicides Rate and The Average Income in the formal sector - {} $(Corr = {}$)'.format(year,round(corr_gdp,2)), fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "#Fitting data\n",
    "xplot = np.linspace(X[0],X[-1],500)\n",
    "hplot =np.array([],float)\n",
    "gplot =np.array([],float) # g(x) = a + bx + cx^2\n",
    "pplot = np.array([],float) # polynomial \n",
    "for xi in xplot:\n",
    "    hi = (v/((xi-300)**w)) - 25\n",
    "    hplot = np.append(hplot,hi)\n",
    "    \n",
    "    gi = a + b*x + c*x**2\n",
    "    gplot = np.append(gplot,gi)\n",
    "    \n",
    "    pi = Newton(Xint,Yint,xi)[0]\n",
    "    pplot = np.append(pplot,pi)\n",
    "   \n",
    "\n",
    "\n",
    "plt.plot(xplot, hplot,'-', linewidth = 2, c= 'crimson', label = '$y = [{}/(x-300)^ ({})]-25$'.format(round(v[0],2),round(w[0],2)))\n",
    "plt.plot(xplot, hplot +pplot ,'--', linewidth = 2, c= 'forestgreen', label = '$y \\pm P_3(x) \\ {} \\% \\ PI$'.format(conf_level*100))\n",
    "plt.plot(xplot,np.array(list(map(lambda x: x if x >0 else 0,hplot - pplot))) ,'--', linewidth = 2, c= 'forestgreen')\n",
    "\n",
    "#Legend\n",
    "legend = plt.legend(loc = 'best', shadow = False, frameon = True, framealpha = 0.8)\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(13,7)\n",
    "plt.setp(legend.get_texts(), color = 'white')\n",
    "plt.xticks(fontsize = 13)\n",
    "plt.yticks(fontsize = 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting---------------------------------------\n",
    "\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axis.grid': True})\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "#Scatter\n",
    "plt.plot(X,Y,'o',linewidth = 2.4, markersize = 9, alpha = 0.9, label = 'Cities', c = 'royalblue')\n",
    "    \n",
    "#Labels\n",
    "plt.xlabel('Average Income In The Formal Sector', fontsize = 14)\n",
    "plt.ylabel('Homicides Rate - 15-29 Years',fontsize = 14)\n",
    "plt.title(' The Relationship Between The Homicides Rate and The Average Income in the formal sector - {} $(Corr = {}$)'.format(year,round(corr_gdp,2)), fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "#Fitting data\n",
    "xplot = np.linspace(X[0],X[-1],500)\n",
    "hplot =np.array([],float)\n",
    "gplot =np.array([],float) # g(x) = a + bx + cx^2\n",
    "pplot = np.array([],float) # polynomial \n",
    "for xi in xplot:\n",
    "    hi = (v/((xi-300)**w)) - 25\n",
    "    hplot = np.append(hplot,hi)\n",
    "    \n",
    "    gi = a + b*x + c*x**2\n",
    "    gplot = np.append(gplot,gi)\n",
    "    \n",
    "    pi = Newton(Xint,Yint,xi)[0]\n",
    "    pplot = np.append(pplot,pi)\n",
    "   \n",
    "\n",
    "\n",
    "plt.plot(xplot, hplot,'-', linewidth = 2, c= 'crimson', label = '$y = [{}/(x-300)^{{}}]-25$'.format(round(v[0],2),round(w[0],2)))\n",
    "plt.plot(xplot, hplot +pplot ,'--', linewidth = 2, c= 'forestgreen', label = '$y \\pm P_3(x) \\ {} \\% \\ PI$'.format(conf_level*100))\n",
    "plt.plot(xplot,np.array(list(map(lambda x: x if x >0 else 0,hplot - pplot))) ,'--', linewidth = 2, c= 'forestgreen')\n",
    "\n",
    "#Legend\n",
    "legend = plt.legend(loc = 'best', shadow = False, frameon = True, framealpha = 0.8)\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(13,7)\n",
    "plt.setp(legend.get_texts(), color = 'white')\n",
    "plt.xticks(fontsize = 13)\n",
    "plt.yticks(fontsize = 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting---------------------------------------\n",
    "\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axis.grid': True})\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "#Scatter\n",
    "plt.plot(X,Y,'o',linewidth = 2.4, markersize = 9, alpha = 0.9, label = 'Cities', c = 'royalblue')\n",
    "    \n",
    "#Labels\n",
    "plt.xlabel('Average Income In The Formal Sector', fontsize = 14)\n",
    "plt.ylabel('Homicides Rate - 15-29 Years',fontsize = 14)\n",
    "plt.title(' The Relationship Between The Homicides Rate and The Average Income in the formal sector - {} $(Corr = {}$)'.format(year,round(corr_gdp,2)), fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "#Fitting data\n",
    "xplot = np.linspace(X[0],X[-1],500)\n",
    "hplot =np.array([],float)\n",
    "gplot =np.array([],float) # g(x) = a + bx + cx^2\n",
    "pplot = np.array([],float) # polynomial \n",
    "for xi in xplot:\n",
    "    hi = (v/((xi-300)**w)) - 25\n",
    "    hplot = np.append(hplot,hi)\n",
    "    \n",
    "    gi = a + b*x + c*x**2\n",
    "    gplot = np.append(gplot,gi)\n",
    "    \n",
    "    pi = Newton(Xint,Yint,xi)[0]\n",
    "    pplot = np.append(pplot,pi)\n",
    "   \n",
    "\n",
    "\n",
    "plt.plot(xplot, hplot,'-', linewidth = 2, c= 'crimson', label = '$y = [{}/(x-300)^\\{{}\\}]-25$'.format(round(v[0],2),round(w[0],2)))\n",
    "plt.plot(xplot, hplot +pplot ,'--', linewidth = 2, c= 'forestgreen', label = '$y \\pm P_3(x) \\ {} \\% \\ PI$'.format(conf_level*100))\n",
    "plt.plot(xplot,np.array(list(map(lambda x: x if x >0 else 0,hplot - pplot))) ,'--', linewidth = 2, c= 'forestgreen')\n",
    "\n",
    "#Legend\n",
    "legend = plt.legend(loc = 'best', shadow = False, frameon = True, framealpha = 0.8)\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(13,7)\n",
    "plt.setp(legend.get_texts(), color = 'white')\n",
    "plt.xticks(fontsize = 13)\n",
    "plt.yticks(fontsize = 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting---------------------------------------\n",
    "\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axis.grid': True})\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "#Scatter\n",
    "plt.plot(X,Y,'o',linewidth = 2.4, markersize = 9, alpha = 0.9, label = 'Cities', c = 'royalblue')\n",
    "    \n",
    "#Labels\n",
    "plt.xlabel('Average Income In The Formal Sector', fontsize = 14)\n",
    "plt.ylabel('Homicides Rate - 15-29 Years',fontsize = 14)\n",
    "plt.title(' The Relationship Between The Homicides Rate and The Average Income in the formal sector - {} $(Corr = {}$)'.format(year,round(corr_gdp,2)), fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "#Fitting data\n",
    "xplot = np.linspace(X[0],X[-1],500)\n",
    "hplot =np.array([],float)\n",
    "gplot =np.array([],float) # g(x) = a + bx + cx^2\n",
    "pplot = np.array([],float) # polynomial \n",
    "for xi in xplot:\n",
    "    hi = (v/((xi-300)**w)) - 25\n",
    "    hplot = np.append(hplot,hi)\n",
    "    \n",
    "    gi = a + b*x + c*x**2\n",
    "    gplot = np.append(gplot,gi)\n",
    "    \n",
    "    pi = Newton(Xint,Yint,xi)[0]\n",
    "    pplot = np.append(pplot,pi)\n",
    "   \n",
    "\n",
    "\n",
    "plt.plot(xplot, hplot,'-', linewidth = 2, c= 'crimson', label = '$y = [{}/(x-300)^{{}}]-25$'.format(round(v[0],2),round(w[0],2)))\n",
    "plt.plot(xplot, hplot +pplot ,'--', linewidth = 2, c= 'forestgreen', label = '$y \\pm P_3(x) \\ {} \\% \\ PI$'.format(conf_level*100))\n",
    "plt.plot(xplot,np.array(list(map(lambda x: x if x >0 else 0,hplot - pplot))) ,'--', linewidth = 2, c= 'forestgreen')\n",
    "\n",
    "#Legend\n",
    "legend = plt.legend(loc = 'best', shadow = False, frameon = True, framealpha = 0.8)\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(13,7)\n",
    "plt.setp(legend.get_texts(), color = 'white')\n",
    "plt.xticks(fontsize = 13)\n",
    "plt.yticks(fontsize = 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting---------------------------------------\n",
    "\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axis.grid': True})\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "#Scatter\n",
    "plt.plot(X,Y,'o',linewidth = 2.4, markersize = 9, alpha = 0.9, label = 'Cities', c = 'royalblue')\n",
    "    \n",
    "#Labels\n",
    "plt.xlabel('Average Income In The Formal Sector', fontsize = 14)\n",
    "plt.ylabel('Homicides Rate - 15-29 Years',fontsize = 14)\n",
    "plt.title(' The Relationship Between The Homicides Rate and The Average Income in the formal sector - {} $(Corr = {}$)'.format(year,round(corr_gdp,2)), fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "#Fitting data\n",
    "xplot = np.linspace(X[0],X[-1],500)\n",
    "hplot =np.array([],float)\n",
    "gplot =np.array([],float) # g(x) = a + bx + cx^2\n",
    "pplot = np.array([],float) # polynomial \n",
    "for xi in xplot:\n",
    "    hi = (v/((xi-300)**w)) - 25\n",
    "    hplot = np.append(hplot,hi)\n",
    "    \n",
    "    gi = a + b*x + c*x**2\n",
    "    gplot = np.append(gplot,gi)\n",
    "    \n",
    "    pi = Newton(Xint,Yint,xi)[0]\n",
    "    pplot = np.append(pplot,pi)\n",
    "   \n",
    "\n",
    "\n",
    "plt.plot(xplot, hplot,'-', linewidth = 2, c= 'crimson', label = '$y = [{}/(x-300)^{}]-25$'.format(round(v[0],2),round(w[0],2)))\n",
    "plt.plot(xplot, hplot +pplot ,'--', linewidth = 2, c= 'forestgreen', label = '$y \\pm P_3(x) \\ {} \\% \\ PI$'.format(conf_level*100))\n",
    "plt.plot(xplot,np.array(list(map(lambda x: x if x >0 else 0,hplot - pplot))) ,'--', linewidth = 2, c= 'forestgreen')\n",
    "\n",
    "#Legend\n",
    "legend = plt.legend(loc = 'best', shadow = False, frameon = True, framealpha = 0.8)\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(13,7)\n",
    "plt.setp(legend.get_texts(), color = 'white')\n",
    "plt.xticks(fontsize = 13)\n",
    "plt.yticks(fontsize = 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting---------------------------------------\n",
    "\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axis.grid': True})\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "#Scatter\n",
    "plt.plot(X,Y,'o',linewidth = 2.4, markersize = 9, alpha = 0.9, label = 'Cities', c = 'royalblue')\n",
    "    \n",
    "#Labels\n",
    "plt.xlabel('Average Income In The Formal Sector', fontsize = 14)\n",
    "plt.ylabel('Homicides Rate - 15-29 Years',fontsize = 14)\n",
    "plt.title(' The Relationship Between The Homicides Rate and The Average Income in the formal sector - {} $(Corr = {}$)'.format(year,round(corr_gdp,2)), fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "#Fitting data\n",
    "xplot = np.linspace(X[0],X[-1],500)\n",
    "hplot =np.array([],float)\n",
    "gplot =np.array([],float) # g(x) = a + bx + cx^2\n",
    "pplot = np.array([],float) # polynomial \n",
    "for xi in xplot:\n",
    "    hi = (v/((xi-300)**w)) - 25\n",
    "    hplot = np.append(hplot,hi)\n",
    "    \n",
    "    gi = a + b*x + c*x**2\n",
    "    gplot = np.append(gplot,gi)\n",
    "    \n",
    "    pi = Newton(Xint,Yint,xi)[0]\n",
    "    pplot = np.append(pplot,pi)\n",
    "   \n",
    "\n",
    "\n",
    "plt.plot(xplot, hplot,'-', linewidth = 2, c= 'crimson', label = '$y = [{}/(x-300)^{\\{}}]-25$'.format(round(v[0],2),round(w[0],2)))\n",
    "plt.plot(xplot, hplot +pplot ,'--', linewidth = 2, c= 'forestgreen', label = '$y \\pm P_3(x) \\ {} \\% \\ PI$'.format(conf_level*100))\n",
    "plt.plot(xplot,np.array(list(map(lambda x: x if x >0 else 0,hplot - pplot))) ,'--', linewidth = 2, c= 'forestgreen')\n",
    "\n",
    "#Legend\n",
    "legend = plt.legend(loc = 'best', shadow = False, frameon = True, framealpha = 0.8)\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(13,7)\n",
    "plt.setp(legend.get_texts(), color = 'white')\n",
    "plt.xticks(fontsize = 13)\n",
    "plt.yticks(fontsize = 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting---------------------------------------\n",
    "\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axis.grid': True})\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "#Scatter\n",
    "plt.plot(X,Y,'o',linewidth = 2.4, markersize = 9, alpha = 0.9, label = 'Cities', c = 'royalblue')\n",
    "    \n",
    "#Labels\n",
    "plt.xlabel('Average Income In The Formal Sector', fontsize = 14)\n",
    "plt.ylabel('Homicides Rate - 15-29 Years',fontsize = 14)\n",
    "plt.title(' The Relationship Between The Homicides Rate and The Average Income in the formal sector - {} $(Corr = {}$)'.format(year,round(corr_gdp,2)), fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "#Fitting data\n",
    "xplot = np.linspace(X[0],X[-1],500)\n",
    "hplot =np.array([],float)\n",
    "gplot =np.array([],float) # g(x) = a + bx + cx^2\n",
    "pplot = np.array([],float) # polynomial \n",
    "for xi in xplot:\n",
    "    hi = (v/((xi-300)**w)) - 25\n",
    "    hplot = np.append(hplot,hi)\n",
    "    \n",
    "    gi = a + b*x + c*x**2\n",
    "    gplot = np.append(gplot,gi)\n",
    "    \n",
    "    pi = Newton(Xint,Yint,xi)[0]\n",
    "    pplot = np.append(pplot,pi)\n",
    "   \n",
    "\n",
    "\n",
    "plt.plot(xplot, hplot,'-', linewidth = 2, c= 'crimson', label = '$y = [{}/(x-300)^({})]-25$'.format(round(v[0],2),round(w[0],2)))\n",
    "plt.plot(xplot, hplot +pplot ,'--', linewidth = 2, c= 'forestgreen', label = '$y \\pm P_3(x) \\ {} \\% \\ PI$'.format(conf_level*100))\n",
    "plt.plot(xplot,np.array(list(map(lambda x: x if x >0 else 0,hplot - pplot))) ,'--', linewidth = 2, c= 'forestgreen')\n",
    "\n",
    "#Legend\n",
    "legend = plt.legend(loc = 'best', shadow = False, frameon = True, framealpha = 0.8)\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(13,7)\n",
    "plt.setp(legend.get_texts(), color = 'white')\n",
    "plt.xticks(fontsize = 13)\n",
    "plt.yticks(fontsize = 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting 15-29 years homicide deaths \n",
    "df_young = df_sim.copy()\n",
    "df_young['DTOBITO'] = df_young['DTOBITO'].apply(lambda x: str(x)[-4:])\n",
    "df_young = df_young[(df_young.CIRCOBITO == 3) & (df_young.IDADE >= 415) & (df_young.IDADE <= 429) & (df_young.DTOBITO == str(year)) ]\n",
    "deaths_young = df_young.shape[0]\n",
    "print('Number of homocides: {} ({}%)'.format(deaths_young,deaths_young*100/deaths))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Homicide deaths ocross the country\n",
    "#source: Atlas da violencia - ipea.gov.br\n",
    "#Firtly, I've to choose the year I'll look at to ensure all values I need is available in that year\n",
    "\n",
    "df_h = pd.read_csv('homicidios.csv', sep = ';')\n",
    "year = 2016\n",
    "df_h = df_h[df_h.período == year].drop_duplicates(subset = 'cod', keep = 'first')\n",
    "deaths = df_h['valor'].sum()\n",
    "print('Number of homicides according to that database: {}'.format(deaths))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Homicids detahs in capitals\n",
    "capitals = ['Manaus','Belém','Macapá','São Luís','Terezinha','Fortaleza','Natal','João Pessoa','Recife','Maceió',\n",
    "'Aracaju','Salvador','Belo Horizonte','Vitória','Rio de Janeiro','São Paulo','Curitiba','Florianópolis','Porto Alegre',\n",
    "'Cuiabá','Goiânia','Brasília','Campo Grande','Porto Velho','Boa Vista','Palmas','Rio Branco']\n",
    "\n",
    "#Remove cities whose their name is the same of the capitals\n",
    "df_cap_h = df_h[df_h['nome'].isin(capitals)].sort_values(by =['nome','valor']).drop_duplicates(subset = 'nome', keep = 'last')\n",
    "print('number of capitals:',df_cap_h.shape[0])\n",
    "\n",
    "\n",
    "deaths_cap = df_cap_h['valor'].sum()\n",
    "codes_cap = df_cap_h['cod'].to_list()\n",
    "\n",
    "percentage_cap = round((deaths_cap/deaths),4)\n",
    "print('The capitals account for {}% of homicide deaths caused in Brazil ({})'.format(round(percentage_cap*100,2),year))\n",
    "df_cap_h.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Source: Base de Homicídios SIM\n",
    "df_sim = pd.read_excel(\"1. SIM (Homicidios)//DadosHomicidios_2013-18_SIM.xlsx\", sheet_name= 'Campos de interesse')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting 15-29 years homicide deaths \n",
    "df_young = df_sim.copy()\n",
    "df_young['DTOBITO'] = df_young['DTOBITO'].apply(lambda x: str(x)[-4:])\n",
    "df_young = df_young[(df_young.CIRCOBITO == 3) & (df_young.IDADE >= 415) & (df_young.IDADE <= 429) & (df_young.DTOBITO == str(year)) ]\n",
    "deaths_young = df_young.shape[0]\n",
    "print('Number of homocides: {} ({}%)'.format(deaths_young,deaths_young*100/deaths))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Homicide deaths ocross the country\n",
    "#source: Atlas da violencia - ipea.gov.br\n",
    "#Firtly, I've to choose the year I'll look at to ensure all values I need is available in that year\n",
    "\n",
    "df_h = pd.read_csv('homicidios.csv', sep = ';')\n",
    "year = 2019\n",
    "df_h = df_h[df_h.período == year].drop_duplicates(subset = 'cod', keep = 'first')\n",
    "deaths = df_h['valor'].sum()\n",
    "print('Number of homicides according to that database: {}'.format(deaths))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Homicide deaths ocross the country\n",
    "#source: Atlas da violencia - ipea.gov.br\n",
    "#Firtly, I've to choose the year I'll look at to ensure all values I need is available in that year\n",
    "\n",
    "df_h = pd.read_csv('homicidios.csv', sep = ';')\n",
    "year = 2018\n",
    "df_h = df_h[df_h.período == year].drop_duplicates(subset = 'cod', keep = 'first')\n",
    "deaths = df_h['valor'].sum()\n",
    "print('Number of homicides according to that database: {}'.format(deaths))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Homicide deaths ocross the country\n",
    "#source: Atlas da violencia - ipea.gov.br\n",
    "#Firtly, I've to choose the year I'll look at to ensure all values I need is available in that year\n",
    "\n",
    "df_h = pd.read_csv('homicidios.csv', sep = ';')\n",
    "year = 2017\n",
    "df_h = df_h[df_h.período == year].drop_duplicates(subset = 'cod', keep = 'first')\n",
    "deaths = df_h['valor'].sum()\n",
    "print('Number of homicides according to that database: {}'.format(deaths))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Homicids detahs in capitals\n",
    "capitals = ['Manaus','Belém','Macapá','São Luís','Terezinha','Fortaleza','Natal','João Pessoa','Recife','Maceió',\n",
    "'Aracaju','Salvador','Belo Horizonte','Vitória','Rio de Janeiro','São Paulo','Curitiba','Florianópolis','Porto Alegre',\n",
    "'Cuiabá','Goiânia','Brasília','Campo Grande','Porto Velho','Boa Vista','Palmas','Rio Branco']\n",
    "\n",
    "#Remove cities whose their name is the same of the capitals\n",
    "df_cap_h = df_h[df_h['nome'].isin(capitals)].sort_values(by =['nome','valor']).drop_duplicates(subset = 'nome', keep = 'last')\n",
    "print('number of capitals:',df_cap_h.shape[0])\n",
    "\n",
    "\n",
    "deaths_cap = df_cap_h['valor'].sum()\n",
    "codes_cap = df_cap_h['cod'].to_list()\n",
    "\n",
    "percentage_cap = round((deaths_cap/deaths),4)\n",
    "print('The capitals account for {}% of homicide deaths caused in Brazil ({})'.format(round(percentage_cap*100,2),year))\n",
    "df_cap_h.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting 15-29 years homicide deaths \n",
    "df_young = df_sim.copy()\n",
    "df_young['DTOBITO'] = df_young['DTOBITO'].apply(lambda x: str(x)[-4:])\n",
    "df_young = df_young[(df_young.CIRCOBITO == 3) & (df_young.IDADE >= 415) & (df_young.IDADE <= 429) & (df_young.DTOBITO == str(year)) ]\n",
    "deaths_young = df_young.shape[0]\n",
    "print('Number of homocides: {} ({}%)'.format(deaths_young,deaths_young*100/deaths))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting 15-29 years homicide deaths \n",
    "df_young = df_sim.copy()\n",
    "df_young['DTOBITO'] = df_young['DTOBITO'].apply(lambda x: str(x)[-4:])\n",
    "df_young = df_young[(df_young.CIRCOBITO == 3) & (df_young.IDADE >= 415) & (df_young.IDADE <= 429) & (df_young.DTOBITO == str(year)) ]\n",
    "deaths_young = df_young.shape[0]\n",
    "print('Number of homocides of 15-29 years old: {} ({}%)'.format(deaths_young,round(deaths_young*100/deaths))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting 15-29 years homicide deaths \n",
    "df_young = df_sim.copy()\n",
    "df_young['DTOBITO'] = df_young['DTOBITO'].apply(lambda x: str(x)[-4:])\n",
    "df_young = df_young[(df_young.CIRCOBITO == 3) & (df_young.IDADE >= 415) & (df_young.IDADE <= 429) & (df_young.DTOBITO == str(year)) ]\n",
    "deaths_young = df_young.shape[0]\n",
    "print('Number of homocides of 15-29 years old: {} ({}%)'.format(deaths_young,round(deaths_young*100/deaths)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "#For 2017 we have:\n",
    "print('The capitals account for {}% of homicide deaths caused in Brazil ({})'.format(round(percentage_cap*100,2),year))\n",
    "print('Number of homocides of 15-29 years old: {} ({}%)'.format(deaths_young,round(deaths_young*100/deaths)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting 15-29 years homicide deaths \n",
    "df_young = df_sim.copy()\n",
    "df_young['DTOBITO'] = df_young['DTOBITO'].apply(lambda x: str(x)[-4:])\n",
    "df_young = df_young[(df_young.CIRCOBITO == 3) & (df_young.IDADE >= 415) & (df_young.IDADE <= 429) & (df_young.DTOBITO == str(year)) ]\n",
    "deaths_young = df_young.shape[0]\n",
    "print('Number of homocides of 15-29 years old: {} ({}%)'.format(deaths_young,round(deaths_young*100/deaths)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "target = round(0.8 *df_young.shape[0],2)\n",
    "target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Grouping deaths by ciy\n",
    "df_death = df_young.groupby(by = ['CODMUNOCOR']).agg({'CONTADOR': 'count'}).rename(columns = {df_young.columns[0]: \"N_HOMICIDES\"}).sort_values( by = 'N_HOMICIDES',ascending = False).reset_index()\n",
    "all_cities = df_death.shape[0] # number f cities\n",
    "df_death['Cumulative'] = df_death['N_HOMICIDES'].cumsum(axis = 0, skipna = True)\n",
    "df_80 = df_death.iloc[:400,:]\n",
    "df_80"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Checking duplicated city codes\n",
    "duplicated = df_80.duplicated(subset ='CODMUNOCOR', keep = 'last' )\n",
    "display(df_80[duplicated])\n",
    "print('OK')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = round(df_80.iloc[-1,-1]/deaths*100,2)\n",
    "target_cities = round((df_80.shape[0]/all_cities)*100,2)\n",
    "print(\"The 400 cities with the highest number of homocides({}% of cities provided by the SIM databse) account for {}% of deaths by homicide in {}\".format(target_cities,result,year))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Homicide deaths ocross the country\n",
    "#source: Atlas da violencia - ipea.gov.br\n",
    "#Firtly, I've to choose the year I'll look at to ensure all values I need is available in that year\n",
    "\n",
    "df_h = pd.read_csv('homicidios.csv', sep = ';')\n",
    "year = 2018\n",
    "df_h = df_h[df_h.período == year].drop_duplicates(subset = 'cod', keep = 'first')\n",
    "deaths = df_h['valor'].sum()\n",
    "print('Number of homicides according to that database: {}'.format(deaths))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Homicids detahs in capitals\n",
    "capitals = ['Manaus','Belém','Macapá','São Luís','Terezinha','Fortaleza','Natal','João Pessoa','Recife','Maceió',\n",
    "'Aracaju','Salvador','Belo Horizonte','Vitória','Rio de Janeiro','São Paulo','Curitiba','Florianópolis','Porto Alegre',\n",
    "'Cuiabá','Goiânia','Brasília','Campo Grande','Porto Velho','Boa Vista','Palmas','Rio Branco']\n",
    "\n",
    "#Remove cities whose their name is the same of the capitals\n",
    "df_cap_h = df_h[df_h['nome'].isin(capitals)].sort_values(by =['nome','valor']).drop_duplicates(subset = 'nome', keep = 'last')\n",
    "print('number of capitals:',df_cap_h.shape[0])\n",
    "\n",
    "\n",
    "deaths_cap = df_cap_h['valor'].sum()\n",
    "codes_cap = df_cap_h['cod'].to_list()\n",
    "\n",
    "percentage_cap = round((deaths_cap/deaths),4)\n",
    "print('The capitals account for {}% of homicide deaths caused in Brazil ({})'.format(round(percentage_cap*100,2),year))\n",
    "df_cap_h.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Source: Base de Homicídios SIM\n",
    "df_sim = pd.read_excel(\"1. SIM (Homicidios)//DadosHomicidios_2013-18_SIM.xlsx\", sheet_name= 'Campos de interesse')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting 15-29 years homicide deaths \n",
    "df_young = df_sim.copy()\n",
    "df_young['DTOBITO'] = df_young['DTOBITO'].apply(lambda x: str(x)[-4:])\n",
    "df_young = df_young[(df_young.CIRCOBITO == 3) & (df_young.IDADE >= 415) & (df_young.IDADE <= 429) & (df_young.DTOBITO == str(year)) ]\n",
    "deaths_young = df_young.shape[0]\n",
    "print('Number of homocides of 15-29 years old: {} ({}%)'.format(deaths_young,round(deaths_young*100/deaths)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Homicide deaths ocross the country\n",
    "#source: Atlas da violencia - ipea.gov.br\n",
    "#Firtly, I've to choose the year I'll look at to ensure all values I need is available in that year\n",
    "\n",
    "df_h = pd.read_csv('homicidios.csv', sep = ';')\n",
    "year = 2017\n",
    "df_h = df_h[df_h.período == year].drop_duplicates(subset = 'cod', keep = 'first')\n",
    "deaths = df_h['valor'].sum()\n",
    "print('Number of homicides according to that database: {}'.format(deaths))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Homicids detahs in capitals\n",
    "capitals = ['Manaus','Belém','Macapá','São Luís','Terezinha','Fortaleza','Natal','João Pessoa','Recife','Maceió',\n",
    "'Aracaju','Salvador','Belo Horizonte','Vitória','Rio de Janeiro','São Paulo','Curitiba','Florianópolis','Porto Alegre',\n",
    "'Cuiabá','Goiânia','Brasília','Campo Grande','Porto Velho','Boa Vista','Palmas','Rio Branco']\n",
    "\n",
    "#Remove cities whose their name is the same of the capitals\n",
    "df_cap_h = df_h[df_h['nome'].isin(capitals)].sort_values(by =['nome','valor']).drop_duplicates(subset = 'nome', keep = 'last')\n",
    "print('number of capitals:',df_cap_h.shape[0])\n",
    "\n",
    "\n",
    "deaths_cap = df_cap_h['valor'].sum()\n",
    "codes_cap = df_cap_h['cod'].to_list()\n",
    "\n",
    "percentage_cap = round((deaths_cap/deaths),4)\n",
    "print('The capitals account for {}% of homicide deaths caused in Brazil ({})'.format(round(percentage_cap*100,2),year))\n",
    "df_cap_h.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting 15-29 years homicide deaths \n",
    "df_young = df_sim.copy()\n",
    "df_young['DTOBITO'] = df_young['DTOBITO'].apply(lambda x: str(x)[-4:])\n",
    "df_young = df_young[(df_young.CIRCOBITO == 3) & (df_young.IDADE >= 415) & (df_young.IDADE <= 429) & (df_young.DTOBITO == str(year)) ]\n",
    "deaths_young = df_young.shape[0]\n",
    "print('Number of homocides of 15-29 years old: {} ({}%)'.format(deaths_young,round(deaths_young*100/deaths)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "target = round(0.8 *df_young.shape[0],2)\n",
    "target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Grouping deaths by ciy\n",
    "df_death = df_young.groupby(by = ['CODMUNOCOR']).agg({'CONTADOR': 'count'}).rename(columns = {df_young.columns[0]: \"N_HOMICIDES\"}).sort_values( by = 'N_HOMICIDES',ascending = False).reset_index()\n",
    "all_cities = df_death.shape[0] # number f cities\n",
    "df_death['Cumulative'] = df_death['N_HOMICIDES'].cumsum(axis = 0, skipna = True)\n",
    "df_80 = df_death.iloc[:400,:]\n",
    "df_80"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Checking duplicated city codes\n",
    "duplicated = df_80.duplicated(subset ='CODMUNOCOR', keep = 'last' )\n",
    "display(df_80[duplicated])\n",
    "print('OK')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = round(df_80.iloc[-1,-1]/deaths*100,2)\n",
    "target_cities = round((df_80.shape[0]/all_cities)*100,2)\n",
    "print(\"The 400 cities with the highest number of homocides({}% of cities provided by the SIM databse) account for {}% of deaths by homicide in {}\".format(target_cities,result,year))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Homicide deaths ocross the country\n",
    "#source: Atlas da violencia - ipea.gov.br\n",
    "#Firtly, I've to choose the year I'll look at to ensure all values I need is available in that year\n",
    "\n",
    "df_h = pd.read_csv('homicidios.csv', sep = ';')\n",
    "year = 2016\n",
    "df_h = df_h[df_h.período == year].drop_duplicates(subset = 'cod', keep = 'first')\n",
    "deaths = df_h['valor'].sum()\n",
    "print('Number of homicides according to that database: {}'.format(deaths))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Homicids detahs in capitals\n",
    "capitals = ['Manaus','Belém','Macapá','São Luís','Terezinha','Fortaleza','Natal','João Pessoa','Recife','Maceió',\n",
    "'Aracaju','Salvador','Belo Horizonte','Vitória','Rio de Janeiro','São Paulo','Curitiba','Florianópolis','Porto Alegre',\n",
    "'Cuiabá','Goiânia','Brasília','Campo Grande','Porto Velho','Boa Vista','Palmas','Rio Branco']\n",
    "\n",
    "#Remove cities whose their name is the same of the capitals\n",
    "df_cap_h = df_h[df_h['nome'].isin(capitals)].sort_values(by =['nome','valor']).drop_duplicates(subset = 'nome', keep = 'last')\n",
    "print('number of capitals:',df_cap_h.shape[0])\n",
    "\n",
    "\n",
    "deaths_cap = df_cap_h['valor'].sum()\n",
    "codes_cap = df_cap_h['cod'].to_list()\n",
    "\n",
    "percentage_cap = round((deaths_cap/deaths),4)\n",
    "print('The capitals account for {}% of homicide deaths caused in Brazil ({})'.format(round(percentage_cap*100,2),year))\n",
    "df_cap_h.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Source: Base de Homicídios SIM\n",
    "df_sim = pd.read_excel(\"1. SIM (Homicidios)//DadosHomicidios_2013-18_SIM.xlsx\", sheet_name= 'Campos de interesse')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting 15-29 years homicide deaths \n",
    "df_young = df_sim.copy()\n",
    "df_young['DTOBITO'] = df_young['DTOBITO'].apply(lambda x: str(x)[-4:])\n",
    "df_young = df_young[(df_young.CIRCOBITO == 3) & (df_young.IDADE >= 415) & (df_young.IDADE <= 429) & (df_young.DTOBITO == str(year)) ]\n",
    "deaths_young = df_young.shape[0]\n",
    "print('Number of homocides of 15-29 years old: {} ({}%)'.format(deaths_young,round(deaths_young*100/deaths)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "target = round(0.8 *df_young.shape[0],2)\n",
    "target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Grouping deaths by ciy\n",
    "df_death = df_young.groupby(by = ['CODMUNOCOR']).agg({'CONTADOR': 'count'}).rename(columns = {df_young.columns[0]: \"N_HOMICIDES\"}).sort_values( by = 'N_HOMICIDES',ascending = False).reset_index()\n",
    "all_cities = df_death.shape[0] # number f cities\n",
    "df_death['Cumulative'] = df_death['N_HOMICIDES'].cumsum(axis = 0, skipna = True)\n",
    "df_80 = df_death.iloc[:400,:]\n",
    "df_80"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Checking duplicated city codes\n",
    "duplicated = df_80.duplicated(subset ='CODMUNOCOR', keep = 'last' )\n",
    "display(df_80[duplicated])\n",
    "print('OK')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = round(df_80.iloc[-1,-1]/deaths*100,2)\n",
    "target_cities = round((df_80.shape[0]/all_cities)*100,2)\n",
    "print(\"The 400 cities with the highest number of homocides({}% of cities provided by the SIM databse) account for {}% of deaths by homicide in {}\".format(target_cities,result,year))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = round(df_80.iloc[-1,-1]/df_young *100,2)\n",
    "target_cities = round((df_80.shape[0]/all_cities)*100,2)\n",
    "print(\"The 400 cities with the highest number of homocides({}% of cities provided by the SIM databse) account for {}% of deaths by homicide in {}\".format(target_cities,result,year))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = round(df_80.iloc[-1,-1]/deaths_young*100,2)\n",
    "target_cities = round((df_80.shape[0]/all_cities)*100,2)\n",
    "print(\"The 400 cities with the highest number of homocides({}% of cities provided by the SIM databse) account for {}% of deaths by homicide in {}\".format(target_cities,result,year))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Homicide deaths ocross the country\n",
    "#source: Atlas da violencia - ipea.gov.br\n",
    "#Firtly, I've to choose the year I'll look at to ensure all values I need is available in that year\n",
    "\n",
    "df_h = pd.read_csv('homicidios.csv', sep = ';')\n",
    "year = 2017\n",
    "df_h = df_h[df_h.período == year].drop_duplicates(subset = 'cod', keep = 'first')\n",
    "deaths = df_h['valor'].sum()\n",
    "print('Number of homicides according to that database: {}'.format(deaths))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Homicids detahs in capitals\n",
    "capitals = ['Manaus','Belém','Macapá','São Luís','Terezinha','Fortaleza','Natal','João Pessoa','Recife','Maceió',\n",
    "'Aracaju','Salvador','Belo Horizonte','Vitória','Rio de Janeiro','São Paulo','Curitiba','Florianópolis','Porto Alegre',\n",
    "'Cuiabá','Goiânia','Brasília','Campo Grande','Porto Velho','Boa Vista','Palmas','Rio Branco']\n",
    "\n",
    "#Remove cities whose their name is the same of the capitals\n",
    "df_cap_h = df_h[df_h['nome'].isin(capitals)].sort_values(by =['nome','valor']).drop_duplicates(subset = 'nome', keep = 'last')\n",
    "print('number of capitals:',df_cap_h.shape[0])\n",
    "\n",
    "\n",
    "deaths_cap = df_cap_h['valor'].sum()\n",
    "codes_cap = df_cap_h['cod'].to_list()\n",
    "\n",
    "percentage_cap = round((deaths_cap/deaths),4)\n",
    "print('The capitals account for {}% of homicide deaths caused in Brazil ({})'.format(round(percentage_cap*100,2),year))\n",
    "df_cap_h.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Source: Base de Homicídios SIM\n",
    "df_sim = pd.read_excel(\"1. SIM (Homicidios)//DadosHomicidios_2013-18_SIM.xlsx\", sheet_name= 'Campos de interesse')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting 15-29 years homicide deaths \n",
    "df_young = df_sim.copy()\n",
    "df_young['DTOBITO'] = df_young['DTOBITO'].apply(lambda x: str(x)[-4:])\n",
    "df_young = df_young[(df_young.CIRCOBITO == 3) & (df_young.IDADE >= 415) & (df_young.IDADE <= 429) & (df_young.DTOBITO == str(year)) ]\n",
    "deaths_young = df_young.shape[0]\n",
    "print('Number of homocides of 15-29 years old: {} ({}%)'.format(deaths_young,round(deaths_young*100/deaths)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "target = round(0.8 *df_young.shape[0],2)\n",
    "target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Grouping deaths by ciy\n",
    "df_death = df_young.groupby(by = ['CODMUNOCOR']).agg({'CONTADOR': 'count'}).rename(columns = {df_young.columns[0]: \"N_HOMICIDES\"}).sort_values( by = 'N_HOMICIDES',ascending = False).reset_index()\n",
    "all_cities = df_death.shape[0] # number f cities\n",
    "df_death['Cumulative'] = df_death['N_HOMICIDES'].cumsum(axis = 0, skipna = True)\n",
    "df_80 = df_death.iloc[:400,:]\n",
    "df_80"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Checking duplicated city codes\n",
    "duplicated = df_80.duplicated(subset ='CODMUNOCOR', keep = 'last' )\n",
    "display(df_80[duplicated])\n",
    "print('OK')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = round(df_80.iloc[-1,-1]/deaths_young*100,2)\n",
    "target_cities = round((df_80.shape[0]/all_cities)*100,2)\n",
    "print(\"The 400 cities with the highest number of homocides({}% of cities provided by the SIM databse) account for {}% of deaths by homicide in {}\".format(target_cities,result,year))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Homicide deaths ocross the country\n",
    "#source: Atlas da violencia - ipea.gov.br\n",
    "#Firtly, I've to choose the year I'll look at to ensure all values I need is available in that year\n",
    "\n",
    "df_h = pd.read_csv('homicidios.csv', sep = ';')\n",
    "year = 2016\n",
    "df_h = df_h[df_h.período == year].drop_duplicates(subset = 'cod', keep = 'first')\n",
    "deaths = df_h['valor'].sum()\n",
    "print('Number of homicides according to that database: {}'.format(deaths))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Homicids detahs in capitals\n",
    "capitals = ['Manaus','Belém','Macapá','São Luís','Terezinha','Fortaleza','Natal','João Pessoa','Recife','Maceió',\n",
    "'Aracaju','Salvador','Belo Horizonte','Vitória','Rio de Janeiro','São Paulo','Curitiba','Florianópolis','Porto Alegre',\n",
    "'Cuiabá','Goiânia','Brasília','Campo Grande','Porto Velho','Boa Vista','Palmas','Rio Branco']\n",
    "\n",
    "#Remove cities whose their name is the same of the capitals\n",
    "df_cap_h = df_h[df_h['nome'].isin(capitals)].sort_values(by =['nome','valor']).drop_duplicates(subset = 'nome', keep = 'last')\n",
    "print('number of capitals:',df_cap_h.shape[0])\n",
    "\n",
    "\n",
    "deaths_cap = df_cap_h['valor'].sum()\n",
    "codes_cap = df_cap_h['cod'].to_list()\n",
    "\n",
    "percentage_cap = round((deaths_cap/deaths),4)\n",
    "print('The capitals account for {}% of homicide deaths caused in Brazil ({})'.format(round(percentage_cap*100,2),year))\n",
    "df_cap_h.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Source: Base de Homicídios SIM\n",
    "df_sim = pd.read_excel(\"1. SIM (Homicidios)//DadosHomicidios_2013-18_SIM.xlsx\", sheet_name= 'Campos de interesse')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting 15-29 years homicide deaths \n",
    "df_young = df_sim.copy()\n",
    "df_young['DTOBITO'] = df_young['DTOBITO'].apply(lambda x: str(x)[-4:])\n",
    "df_young = df_young[(df_young.CIRCOBITO == 3) & (df_young.IDADE >= 415) & (df_young.IDADE <= 429) & (df_young.DTOBITO == str(year)) ]\n",
    "deaths_young = df_young.shape[0]\n",
    "print('Number of homocides of 15-29 years old: {} ({}%)'.format(deaths_young,round(deaths_young*100/deaths)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "target = round(0.8 *df_young.shape[0],2)\n",
    "target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Grouping deaths by ciy\n",
    "df_death = df_young.groupby(by = ['CODMUNOCOR']).agg({'CONTADOR': 'count'}).rename(columns = {df_young.columns[0]: \"N_HOMICIDES\"}).sort_values( by = 'N_HOMICIDES',ascending = False).reset_index()\n",
    "all_cities = df_death.shape[0] # number f cities\n",
    "df_death['Cumulative'] = df_death['N_HOMICIDES'].cumsum(axis = 0, skipna = True)\n",
    "df_80 = df_death.iloc[:400,:]\n",
    "df_80"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Checking duplicated city codes\n",
    "duplicated = df_80.duplicated(subset ='CODMUNOCOR', keep = 'last' )\n",
    "display(df_80[duplicated])\n",
    "print('OK')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = round(df_80.iloc[-1,-1]/deaths_young*100,2)\n",
    "target_cities = round((df_80.shape[0]/all_cities)*100,2)\n",
    "print(\"The 400 cities with the highest number of homocides({}% of cities provided by the SIM databse) account for {}% of deaths by homicide in {}\".format(target_cities,result,year))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_sim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting 15-29 years homicide deaths \n",
    "df_young = df_sim.copy()\n",
    "df_young['DTOBITO'] = df_young['DTOBITO'].apply(lambda x: str(x)[-4:])\n",
    "df_total = df_young.copy()\n",
    "df_young = df_young[(df_young.CIRCOBITO == 3) & (df_young.IDADE >= 415) & (df_young.IDADE <= 429) & (df_young.DTOBITO == str(year)) ]\n",
    "deaths_young = df_young.shape[0]\n",
    "print('Number of homocides of 15-29 years old: {} ({}%)'.format(deaths_young,round(deaths_young*100/deaths)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE >= 400) ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE >= 400) ].sort_values(by = 'IDADE', ascending = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE >= 400) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE >= 400) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5s' if x <= 405 else(\n",
    "                                                    '5-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x < 470 else '70+ years old')))))\n",
    "df_total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_young"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE >= 400) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5s' if x <= 405 else(\n",
    "                                                    '5-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x < 470 else '70+ years old')))))\n",
    "df_total[df.DTOBITO == '2016']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE >= 400) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5s' if x <= 405 else(\n",
    "                                                    '5-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x < 470 else '70+ years old')))))\n",
    "df_total[df_total.DTOBITO == '2016']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5s' if x <= 405 else(\n",
    "                                                    '5-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x < 470 else '70+ years old')))))\n",
    "df_total[df_total.DTOBITO == '2016']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_sim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting 15-29 years homicide deaths \n",
    "df_young = df_sim.copy()\n",
    "df_young['DTOBITO'] = df_young['DTOBITO'].apply(lambda x: str(x)[-4:])\n",
    "df_total = df_young.copy()\n",
    "df_young = df_young[(df_young.CIRCOBITO == 3) & (df_young.IDADE >= 415) & (df_young.IDADE <= 429) & (df_young.DTOBITO == str(year)) ]\n",
    "deaths_young = df_young.shape[0]\n",
    "print('Number of homocides of 15-29 years old: {} ({}%)'.format(deaths_young,round(deaths_young*100/deaths)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total[df_total.DTOBITO == '2016']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total[(df_total.DTOBITO == '2016') & (df_total.CIRCOBITO == 3)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5s' if x <= 405 else(\n",
    "                                                    '5-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total[df_total.DTOBITO == '2016']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total['age']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total['age'].insull()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total['age'].isnull()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total['age'].isnull()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total['age'].isnull().values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total['age'].isnull().values.any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total['age'].duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total['age'].duplicated()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total['age'].duplicated().index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total['age'].duplicated()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total\n",
    "#df_total(df_total['age'].duplicated()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total\n",
    "df_total[df_total['age'].duplicated()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total\n",
    "df_total.duplicated(subset = 'CONTADOR')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total\n",
    "df_total[df_total.duplicated(subset = 'CONTADOR')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total\n",
    "df_total[df_total.duplicated(subset = 'CONTADOR', keep = 'all')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total\n",
    "df_total[df_total.duplicated(subset = 'CONTADOR', keep = False)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total\n",
    "df_total[df_total.duplicated(subset = 'CONTADOR', keep = 'first')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total\n",
    "df_total[df_total.duplicated(subset = 'CONTADOR', keep = 'first')]\n",
    "df_total[df_total == 12458]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total\n",
    "df_total[df_total.duplicated(subset = 'CONTADOR', keep = 'first')]\n",
    "df_total[df_total.CONTADOR == 12458]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total\n",
    "df_total[df_total.duplicated(subset = 'CONTADOR', keep = 'first')]\n",
    "df_total[df_total['ESC'].isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total\n",
    "df_total[df_total.duplicated(subset = 'CONTADOR', keep = 'first')]\n",
    "df_total[df_total['EESCMAE2010'].isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total\n",
    "df_total[df_total.duplicated(subset = 'CONTADOR', keep = 'first')]\n",
    "df_total[df_total['ESC'].isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "df_total.index = range(len(df_total))\n",
    "df_total\n",
    "df_total[df_total.duplicated(subset = 'CONTADOR', keep = 'first')]\n",
    "df_total[df_total['ESCMAE2010'].isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nna ))))))\n",
    "set(df_total['age'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "set(df_total['age'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                     '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "df_total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "field = ['DTOBITO','age']\n",
    "df_total[field]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(columns = {'age':'number of deaths'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(columns = {'age':'number of deaths'}).plot.area()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(columns = {'age':'number of deaths'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_tot_plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(columns = {'age':'number of deaths'}).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(\n",
    "                                        columns = {'age':'number of deaths'}).reset_index().pivot(index = 'DTOBITO', columns = 'age', values = 'number of deaths')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(\n",
    "                                        columns = {'age':'number of deaths'}).reset_index().pivot(index = 'DTOBITO', columns = 'age', values = 'number of deaths').plot.area()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(\n",
    "                                        columns = {'age':'number of deaths'}).reset_index().pivot(index = 'DTOBITO', columns = 'age', values = 'number of deaths').plot.area()\n",
    "\n",
    "plt.figure()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(\n",
    "                                        columns = {'age':'number of deaths'}).reset_index().pivot(index = 'DTOBITO', columns = 'age', values = 'number of deaths').plot.area()\n",
    "#Plot\n",
    "plt.figure()\n",
    "\n",
    "#Settings\n",
    "plt.gcf().set_dpi(120)\n",
    "plt.gcf().set_size_inches(12,6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "#Plot\n",
    "plt.figure()\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(\n",
    "                                        columns = {'age':'number of deaths'}).reset_index().pivot(index = 'DTOBITO', columns = 'age', values = 'number of deaths').plot.area()\n",
    "\n",
    "\n",
    "#Settings\n",
    "plt.gcf().set_dpi(120)\n",
    "plt.gcf().set_size_inches(12,6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "#Plot\n",
    "plt.figure()\n",
    "\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(\n",
    "                                        columns = {'age':'number of deaths'}).reset_index().pivot(index = 'DTOBITO', columns = 'age', values = 'number of deaths').plot.area()\n",
    "\n",
    "\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(10,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "#Plot\n",
    "plt.figure()\n",
    "\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(\n",
    "                                        columns = {'age':'number of deaths'}).reset_index().pivot(index = 'DTOBITO', columns = 'age', values = 'number of deaths').plot.area()\n",
    "#Label\n",
    "plt.xlabel('Number od Deaths')\n",
    "\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(10,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "#Plot\n",
    "plt.figure()\n",
    "\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(\n",
    "                                        columns = {'age':'number of deaths'}).reset_index().pivot(index = 'DTOBITO', columns = 'age', values = 'number of deaths').plot.area()\n",
    "#Label\n",
    "plt.ylabel('Number of Deaths')\n",
    "plt.xlabel('Year')\n",
    "plt.title('Deaths from homicide by age, Brazil, 2013 to 2018', fontweight = 18)\n",
    "leg = plt.legend()\n",
    "plt.setep(leg.get_texts(), color = 'white')\n",
    "\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(10,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "#Plot\n",
    "plt.figure()\n",
    "\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(\n",
    "                                        columns = {'age':'number of deaths'}).reset_index().pivot(index = 'DTOBITO', columns = 'age', values = 'number of deaths').plot.area()\n",
    "#Label\n",
    "plt.ylabel('Number of Deaths')\n",
    "plt.xlabel('Year')\n",
    "plt.title('Deaths from homicide by age, Brazil, 2013 to 2018', fontweight = 18)\n",
    "leg = plt.legend()\n",
    "plt.setp(leg.get_texts(), color = 'white')\n",
    "\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(10,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "#Plot\n",
    "plt.figure()\n",
    "\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(\n",
    "                                        columns = {'age':'number of deaths'}).reset_index().pivot(index = 'DTOBITO', columns = 'age', values = 'number of deaths').plot.area()\n",
    "#Label\n",
    "plt.ylabel('Number of Deaths')\n",
    "plt.xlabel('Year')\n",
    "plt.title('Deaths from homicide by age, Brazil, 2013 to 2018', fontweight = 'bold')\n",
    "leg = plt.legend()\n",
    "plt.setp(leg.get_texts(), color = 'white')\n",
    "\n",
    "#Settings\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(10,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "#Plot\n",
    "plt.figure()\n",
    "\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(\n",
    "                                        columns = {'age':'number of deaths'}).reset_index().pivot(index = 'DTOBITO', columns = 'age', values = 'number of deaths').plot.area()\n",
    "#Label\n",
    "plt.ylabel('Number of Deaths')\n",
    "plt.xlabel('Year')\n",
    "plt.title('Deaths from homicide by age, Brazil, 2013 to 2018', fontweight = 'bold')\n",
    "leg = plt.legend()\n",
    "plt.setp(leg.get_texts(), color = 'white')\n",
    "\n",
    "#Settings\n",
    "plt.xlim(2013,2018)\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(10,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "#Plot\n",
    "plt.figure()\n",
    "\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(\n",
    "                                        columns = {'age':'number of deaths'}).reset_index().pivot(index = 'DTOBITO', columns = 'age', values = 'number of deaths').plot.area()\n",
    "#Label\n",
    "plt.ylabel('Number of Deaths')\n",
    "plt.xlabel('Year')\n",
    "plt.title('Deaths from homicide by age, Brazil, 2013 to 2018', fontweight = 'bold')\n",
    "leg = plt.legend()\n",
    "plt.setp(leg.get_texts(), color = 'white')\n",
    "\n",
    "#Settings\n",
    "plt.xlim('2013','2018')\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(10,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "#Plot\n",
    "plt.figure()\n",
    "\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(\n",
    "                                        columns = {'age':'number of deaths'}).reset_index().astype('DTOBITO': int).pivot(index = 'DTOBITO', columns = 'age', values = 'number of deaths').plot.area()\n",
    "#Label\n",
    "plt.ylabel('Number of Deaths')\n",
    "plt.xlabel('Year')\n",
    "plt.title('Deaths from homicide by age, Brazil, 2013 to 2018', fontweight = 'bold')\n",
    "leg = plt.legend()\n",
    "plt.setp(leg.get_texts(), color = 'white')\n",
    "\n",
    "#Settings\n",
    "plt.xlim('2013','2018')\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(10,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "#Plot\n",
    "plt.figure()\n",
    "\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(\n",
    "                                        columns = {'age':'number of deaths'}).reset_index().astype({'DTOBITO': int}).pivot(index = 'DTOBITO', columns = 'age', values = 'number of deaths').plot.area()\n",
    "#Label\n",
    "plt.ylabel('Number of Deaths')\n",
    "plt.xlabel('Year')\n",
    "plt.title('Deaths from homicide by age, Brazil, 2013 to 2018', fontweight = 'bold')\n",
    "leg = plt.legend()\n",
    "plt.setp(leg.get_texts(), color = 'white')\n",
    "\n",
    "#Settings\n",
    "plt.xlim('2013','2018')\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(10,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "#Plot\n",
    "plt.figure()\n",
    "\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(\n",
    "                                        columns = {'age':'number of deaths'}).reset_index().astype({'DTOBITO': int}).pivot(index = 'DTOBITO', columns = 'age', values = 'number of deaths').plot.area()\n",
    "#Label\n",
    "plt.ylabel('Number of Deaths')\n",
    "plt.xlabel('Year')\n",
    "plt.title('Deaths from homicide by age, Brazil, 2013 to 2018', fontweight = 'bold')\n",
    "leg = plt.legend()\n",
    "plt.setp(leg.get_texts(), color = 'white')\n",
    "\n",
    "#Settings\n",
    "plt.xlim(2013,2018)\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(10,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total['age'].sort_values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "#Plot\n",
    "plt.figure()\n",
    "\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(\n",
    "                                        columns = {'age':'number of deaths'}).reset_index().astype({'DTOBITO': int}).pivot(\n",
    "                                        index = 'DTOBITO', columns = 'age', values = 'number of deaths')[\n",
    "                                        ['Until 5 years old','6-14 years old','15-29 years old','30-49 years old','50-69 years old','70+ years old']\n",
    "                                        ].plot.area()\n",
    "#Label\n",
    "plt.ylabel('Number of Deaths')\n",
    "plt.xlabel('Year')\n",
    "plt.title('Deaths from homicide by age, Brazil, 2013 to 2018', fontweight = 'bold')\n",
    "leg = plt.legend()\n",
    "plt.setp(leg.get_texts(), color = 'white')\n",
    "\n",
    "#Settings\n",
    "plt.xlim(2013,2018)\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(10,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_young "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "###################################### PLOT #######################################################################\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(\n",
    "                                        columns = {'age':'number of deaths'}).reset_index().astype({'DTOBITO': int}).pivot(\n",
    "                                        index = 'DTOBITO', columns = 'age', values = 'number of deaths')[\n",
    "                                        ['Until 5 years old','6-14 years old','15-29 years old','30-49 years old','50-69 years old','70+ years old']\n",
    "                                        ].plot(kind = 'area')\n",
    "#Label\n",
    "plt.ylabel('Number of Deaths')\n",
    "plt.xlabel('Year')\n",
    "plt.title('Deaths from homicide by age, Brazil, 2013 to 2018', fontweight = 'bold')\n",
    "leg = plt.legend()\n",
    "plt.setp(leg.get_texts(), color = 'white')\n",
    "\n",
    "#Settings\n",
    "plt.xlim(2013,2018)\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(10,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "###################################### PLOT #######################################################################\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(\n",
    "                                        columns = {'age':'number of deaths'}).reset_index().astype({'DTOBITO': int}).pivot(\n",
    "                                        index = 'DTOBITO', columns = 'age', values = 'number of deaths')[\n",
    "                                        ['Until 5 years old','6-14 years old','15-29 years old','30-49 years old','50-69 years old','70+ years old']\n",
    "                                        ].plot(kind = 'area', colormap = 'viridis')\n",
    "#Label\n",
    "plt.ylabel('Number of Deaths')\n",
    "plt.xlabel('Year')\n",
    "plt.title('Deaths from homicide by age, Brazil, 2013 to 2018', fontweight = 'bold')\n",
    "leg = plt.legend()\n",
    "plt.setp(leg.get_texts(), color = 'white')\n",
    "\n",
    "#Settings\n",
    "plt.xlim(2013,2018)\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(10,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_total = df_total[(df_total.CIRCOBITO == 3) & (df_total.IDADE <= 500)].sort_values(by = 'IDADE', ascending = True)\n",
    "df_total['age'] = df_total['IDADE'].apply(lambda x: 'Until 5 years old' if x <= 405 else(\n",
    "                                                    '6-14 years old' if x > 405 and x <= 414 else(\n",
    "                                                    '15-29 years old' if x > 414 and x <= 429 else(\n",
    "                                                    '30-49 years old' if x > 429 and x <= 449 else(\n",
    "                                                    '50-69 years old' if x > 449 and x <= 469 else(\n",
    "                                                    '70+ years old' if x > 469 and x <= 500 else np.nan ))))))\n",
    "###################################### PLOT #######################################################################\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "\n",
    "field = ['DTOBITO','age']\n",
    "df_tot_plot = df_total[field]\n",
    "df_tot_plot.sort_values(by = 'DTOBITO', ascending = True).groupby(['DTOBITO', 'age']).agg({'age': np.count_nonzero}).rename(\n",
    "                                        columns = {'age':'number of deaths'}).reset_index().astype({'DTOBITO': int}).pivot(\n",
    "                                        index = 'DTOBITO', columns = 'age', values = 'number of deaths')[\n",
    "                                        ['Until 5 years old','6-14 years old','15-29 years old','30-49 years old','50-69 years old','70+ years old']\n",
    "                                        ].plot(kind = 'area', colormap = 'viridis')\n",
    "#Label\n",
    "plt.ylabel('Number of Deaths')\n",
    "plt.xlabel('Year')\n",
    "plt.title('Deaths from homicide by age, Brazil, 2013 to 2018', fontweight = 'bold')\n",
    "leg = plt.legend()\n",
    "plt.setp(leg.get_texts(), color = 'white')\n",
    "\n",
    "#Settings\n",
    "plt.xlim(2013,2018)\n",
    "plt.gcf().set_dpi(100)\n",
    "plt.gcf().set_size_inches(12,6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 6 points of variance\n",
    "plt.figure()\n",
    "plot_int = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'index', linewidth = 7, alpha = 0.7, color ='goldenrod', fontsize = 16)\n",
    "#interpolate\n",
    "plt.plot(xplot,yplot, '-b', color = 'slateblue', alpha = 0.8, label = 'Interpolation Polynomial Curve')\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_int.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_int.set_ylabel(\"Prediction Interval\", fontsize = 17)\n",
    "plot_int.set_title(\"{}% Dynamic Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 17, fontweight = 'bold')\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [],
   "source": [
    "variable = \"REN_PIBPC_D\"\n",
    "#GDP per  capita\n",
    "df_income['GDP_QUANTILE'] = df_income[variable].apply(lambda x: \"0-10\" if x <= 10 else \n",
    "                                                                (\"10-20\" if x > 10 and x <=20 else\n",
    "                                                                (\"20-30\" if x > 20 and x <=30 else\n",
    "                                                                (\"30-40\" if x > 30 and x <=40 else\n",
    "                                                                (\"40-50\" if x > 40 and x <=50 else\n",
    "                                                                (\"> 50\" if x > 50 else x))))))\n",
    "\n",
    "#Average income in the formal sector\n",
    "df_income['FORM_SEC_QUANTILE'] = df_income[\"REN_RENSF_D\"].apply(lambda x: \"0-500\" if x <= 500 else \n",
    "                                                                (\"500-1000\" if x > 500 and x <= 1000 else\n",
    "                                                                (\"1000-1500\" if x > 1000 and x <=1500 else\n",
    "                                                                (\"1500-2000\" if x > 1500 and x <=2000 else\n",
    "                                                                (\">2000\" if x > 2000 else x\n",
    "                                                                )))))\n",
    "df_income.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_box(dataset,x,y,xlabel,ylabel,title):\n",
    "    #plotting a box-splot chart\n",
    "    sea.set_style('darkgrid', {'axes.grid': True})\n",
    "    plt.figure()\n",
    "    box = sea.boxplot(data = dataset, x = x, y =y, palette = \"GnBu_r\", orient = \"v\", linewidth = 1, saturation= 0.56, fliersize= 0)\n",
    "    swarm = sea.swarmplot(data = dataset, x = x, y = y, palette = 'GnBu_r', orient = 'v', size = 7,alpha= 1, edgecolor= 'grey')\n",
    "    plt.xlabel(xlabel,fontsize = 14)\n",
    "    plt.ylabel(ylabel, fontsize = 14)\n",
    "    #box.set(xlabel = \"Performance (%)\", ylabel = \"School\")\n",
    "    plt.title(title, fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "\n",
    "    #Adjusts\n",
    "    plt.gcf().set_size_inches(17,8)\n",
    "    plt.gcf().set_dpi(100)\n",
    "    plt.xticks(rotation = 35)\n",
    "    #plt.subplots_adjust(left = 0.4)b\n",
    "plot_box(df_income.sort_values(by =\"REN_RENSF_D\", ascending = True), y = \"HOMICIDE_RATE\", x = 'FORM_SEC_QUANTILE',xlabel = \"Average Income in the formal sector\", ylabel =  \"15-29 Years Homicide Rate\", title = \"Box-Plot:Average Income in the formal sector X Homicide Rate\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Normality Test\n",
    "#Using Shapiro-Wilk test to evaluate my data population in order to figure out whether or not my sample data proceeds a Gaussian distribution (sugested to sample size N< 5000)\n",
    "stat,p = scipy.stats.shapiro(df_income['HOMICIDE_RATE']) \n",
    "alpha = 0.05\n",
    "if  p < alpha:\n",
    "    print(\"p-value {} and test statistic {}. The data dont'n follow a Gaussian distribution\".format(p, stat))\n",
    "if p > alpha:\n",
    "    print(\"p-value {} and test statistic {}. I can't conclude the data do not follow a Gaussian shape\".format(p,stat))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q-Q Ploting in order to figure out if the dataset fits a standar normal distribution\n",
    "import statsmodels.graphics.gofplots as stmod\n",
    "stmod.qqplot(df_income['HOMICIDE_RATE'], line = 's',  alpha = 0.75, linewidth = 5)\n",
    "plt.gcf().set_size_inches(7,5)\n",
    "plt.title('Normal Q-Q Plot', fontweight = 'bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Homicide rate distribution\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "plt.hist(df_income['HOMICIDE_RATE'], bins = 30, density = 'True', facecolor = 'midnightblue', alpha = 0.85)\n",
    "sea.kdeplot(df_income['HOMICIDE_RATE'], color = 'red', alpha = 1)\n",
    "\n",
    "#Label\n",
    "plt.ylabel('Frequency', fontsize = 12)\n",
    "plt.xlabel('14-29 Years Homicide Rate', fontsize = 12)\n",
    "plt.title('Homicide Rate Distribution', fontsize = 12, fontweight = 'bold')\n",
    "legend = plt.legend(loc = 'best')\n",
    "0\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(14,7.5)\n",
    "plt.gcf().set_dpi(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Descriptive Statistic\n",
    "mean = np.mean(df_income['HOMICIDE_RATE'])\n",
    "std = np.std(df_income['HOMICIDE_RATE'])\n",
    "kurtosis = scipy.stats.kurtosis(df_income['HOMICIDE_RATE'])\n",
    "skewness = scipy.stats.skew(df_income['HOMICIDE_RATE'])\n",
    "df_desc = pd.DataFrame([[mean,std,kurtosis,skewness]], columns = ['Mean','Std Deviation','Kurtosis', 'Skewness'])\n",
    "display(df_income['HOMICIDE_RATE'].describe())\n",
    "df_desc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_1 = df_income[df_income.FORM_SEC_QUANTILE == \"500-1000\"]['HOMICIDE_RATE'].to_numpy()\n",
    "sample_2 = df_income[df_income.FORM_SEC_QUANTILE == \"1000-1500\"]['HOMICIDE_RATE'].to_numpy()\n",
    "sample_3 = df_income[df_income.FORM_SEC_QUANTILE == \"1500-2000\"]['HOMICIDE_RATE'].to_numpy()\n",
    "sample_4 = df_income[df_income.FORM_SEC_QUANTILE == \">2000\"]['HOMICIDE_RATE'].to_numpy()\n",
    "F,p = scipy.stats.kruskal(sample_1,sample_2,sample_3,sample_4)\n",
    "alpha = 0.05\n",
    "if p < alpha:\n",
    "    print(\"F = {}, p-value = {}. I reject null hypothesis Ho. At least one popullation mean is diferent from others\".format(F,p))\n",
    "if p > alpha:\n",
    "     print(\"F = {}, p-value = {}. I don't have enough evidence to reject  null hypothesisHo. All population means are statistically equal\".format(F,p))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [],
   "source": [
    "dict_metric.setdefault('HOMICIDE_RATE', 'Taxa de homicídio: 14-29 anos')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting the variance\n",
    "variables = [\"HOMICIDE_RATE\",\"REN_RENSF_D\",\"REN_TRPCBF_D\",\"REN_PVAADM\" ]\n",
    "fig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2)\n",
    "axes = [ax1,ax2,ax3,ax4]\n",
    "\n",
    "for ax,variable in zip(axes,variables):\n",
    "    df_var = df_income.groupby(by = 'FORM_SEC_QUANTILE').agg({variable: [np.mean, np.std]})\n",
    "    df_var = df_var.iloc[[2,0,1,-1],:]\n",
    "    #df_var = df_var.sort_values(by = df_var.columns[0], ascending = False)\n",
    "    plot_var = df_var.plot(fig = (10,5),ax = ax, cmap = 'viridis', fontsize = 14)\n",
    "    plot_var.set_xlabel(\"Average Income in The Formal Sector\", fontsize = 14)\n",
    "    plot_var.set_title(\"The std of {} throughout the average Income in the formal sector\".format(dict_metric[variable]), fontsize = 14, fontweight = 'bold')\n",
    "\n",
    "\n",
    "plt.legend(loc= 'best')\n",
    "plt.gcf().set_size_inches(28,8)\n",
    "plt.subplots_adjust(bottom = -0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting the variance\n",
    "sea.set_style('darkgrid', {'axes.grid': True})\n",
    "variables = [\"HOMICIDE_RATE\",\"REN_RENSF_D\",\"REN_TRPCBF_D\",\"REN_PVAADM\" ]\n",
    "fig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2)\n",
    "axes = [ax1,ax2,ax3,ax4]\n",
    "\n",
    "for ax,variable in zip(axes,variables):\n",
    "    df_var = df_income.groupby(by = 'FORM_SEC_QUANTILE').agg({variable: [np.mean, np.std]})\n",
    "    df_var = df_var.iloc[[2,0,1,-1],:]\n",
    "    #df_var = df_var.sort_values(by = df_var.columns[0], ascending = False)\n",
    "    plot_var = df_var.plot(fig = (10,5),ax = ax, cmap = 'viridis', fontsize = 14)\n",
    "    plot_var.set_xlabel(\"Average Income in The Formal Sector\", fontsize = 14)\n",
    "    plot_var.set_title(\"The std of {} throughout the average Income in the formal sector\".format(dict_metric[variable]), fontsize = 14, fontweight = 'bold')\n",
    "\n",
    "\n",
    "plt.legend(loc= 'best')\n",
    "plt.gcf().set_size_inches(28,8)\n",
    "plt.subplots_adjust(bottom = -0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Homicide rate distribution\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "plt.hist(df_income['HOMICIDE_RATE'], bins = 30, density = 'True', facecolor = 'midnightblue', alpha = 0.85)\n",
    "sea.kdeplot(df_income['HOMICIDE_RATE'], color = 'red', alpha = 1)\n",
    "\n",
    "#Label\n",
    "plt.ylabel('Frequency', fontsize = 12)\n",
    "plt.xlabel('14-29 Years Homicide Rate', fontsize = 12)\n",
    "plt.title('Homicide Rate Distribution', fontsize = 12, fontweight = 'bold')\n",
    "legend = plt.legend(loc = 'best')\n",
    "plt.setp(legend.get_texts(), color = 'white')\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(14,7.5)\n",
    "plt.gcf().set_dpi(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_box(dataset,x,y,xlabel,ylabel,title):\n",
    "    #plotting a box-splot chart\n",
    "    #sea.set_style('darkgrid', {'axes.grid': True})\n",
    "    plt.figure()\n",
    "    box = sea.boxplot(data = dataset, x = x, y =y, palette = \"GnBu_r\", orient = \"v\", linewidth = 1, saturation= 0.56, fliersize= 0)\n",
    "    swarm = sea.swarmplot(data = dataset, x = x, y = y, palette = 'GnBu_r', orient = 'v', size = 7,alpha= 1, edgecolor= 'grey')\n",
    "    plt.xlabel(xlabel,fontsize = 14)\n",
    "    plt.ylabel(ylabel, fontsize = 14)\n",
    "    #box.set(xlabel = \"Performance (%)\", ylabel = \"School\")\n",
    "    plt.title(title, fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "\n",
    "    #Adjusts\n",
    "    plt.gcf().set_size_inches(17,8)\n",
    "    plt.gcf().set_dpi(100)\n",
    "    plt.xticks(rotation = 35)\n",
    "    #plt.subplots_adjust(left = 0.4)b\n",
    "plot_box(df_income.sort_values(by =\"REN_RENSF_D\", ascending = True), y = \"HOMICIDE_RATE\", x = 'FORM_SEC_QUANTILE',xlabel = \"Average Income in the formal sector\", ylabel =  \"15-29 Years Homicide Rate\", title = \"Box-Plot:Average Income in the formal sector X Homicide Rate\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_box(dataset,x,y,xlabel,ylabel,title):\n",
    "    #plotting a box-splot chart\n",
    "    sea.set_style('darkgrid', {'axes.grid': True})\n",
    "    plt.figure()\n",
    "    box = sea.boxplot(data = dataset, x = x, y =y, palette = \"GnBu_r\", orient = \"v\", linewidth = 1, saturation= 0.56, fliersize= 0)\n",
    "    swarm = sea.swarmplot(data = dataset, x = x, y = y, palette = 'GnBu_r', orient = 'v', size = 7,alpha= 1, edgecolor= 'grey')\n",
    "    plt.xlabel(xlabel,fontsize = 14)\n",
    "    plt.ylabel(ylabel, fontsize = 14)\n",
    "    #box.set(xlabel = \"Performance (%)\", ylabel = \"School\")\n",
    "    plt.title(title, fontweight = 'bold', fontsize = 14)\n",
    "\n",
    "\n",
    "    #Adjusts\n",
    "    plt.gcf().set_size_inches(17,8)\n",
    "    plt.gcf().set_dpi(100)\n",
    "    plt.xticks(rotation = 35)\n",
    "    #plt.subplots_adjust(left = 0.4)b\n",
    "plot_box(df_income.sort_values(by =\"REN_RENSF_D\", ascending = True), y = \"HOMICIDE_RATE\", x = 'FORM_SEC_QUANTILE',xlabel = \"Average Income in the formal sector\", ylabel =  \"15-29 Years Homicide Rate\", title = \"Box-Plot:Average Income in the formal sector X Homicide Rate\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Input variable\n",
    "variable = \"REN_RENSF_D\"\n",
    "\n",
    "df_income = df_income.sort_values(by = variable, ascending = True)\n",
    "#Computing the correlation between GDP per capita and homicide rate\n",
    "corr_gdp = df_income['HOMICIDE_RATE'].corr(df_income[variable], method = \"pearson\")\n",
    "print('Corr: ', corr_gdp )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Linear regression (Ordinary least squares)\n",
    "#Using a first degree equation (f(x) = a + bx) to approximate\n",
    "\n",
    "X = df_income[variable].to_numpy()\n",
    "Y = df_income['HOMICIDE_RATE'].to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Applying least squares algorithm\n",
    "\n",
    "m = 3 # number of matrix colum/row (mXm) - m-1 degree\n",
    "A = np.zeros([m,m]) # Produt scalar matrix [<Gi,Gj>] mXm\n",
    "B = np.zeros([m,1]) # Independent matrix [<Gj,Yi]> mx1\n",
    "\n",
    "for i in range(m): # n + 1 degree equation\n",
    "    for j in range(m):\n",
    "        A[i][j] = np.sum((X**i)*(X**j))     \n",
    "        \n",
    "for i in range(m):\n",
    "    B[i][0] = np.sum(Y*X**i)\n",
    "\n",
    "#Linear System solution AX = B --> X = BA^-1\n",
    "matrix_solution = np.linalg.inv(A).dot(B)\n",
    "a,b,c = matrix_solution\n",
    "\n",
    "G = 0\n",
    "for i in range(len(matrix_solution)):\n",
    "    G += matrix_solution[i]*X**i    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Sum of squared error\n",
    "print('SSE: ', np.sum((Y-G)**2))\n",
    "\n",
    "#R squared\n",
    "corr_matrix = np.corrcoef(Y,G)\n",
    "R_sq = corr_matrix[0,1] **2\n",
    "print('R^2:',R_sq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Non linear regression\n",
    "\n",
    "#log of function G(x)\n",
    "#T = np.log(X)\n",
    "Z =np.log(Y)\n",
    "T = np.log(X)\n",
    "\n",
    "H = {0: np.array([1]*len(T)), 1:T} #My approximation function h(X)= alpha + beta X\n",
    "m = len(H) # number of matrix colum/row (mXm) \n",
    "A = np.zeros([m,m]) # Scalar Produt of a matrix  [<Gi,Gj>] mXm\n",
    "B = np.zeros([m,1]) # Independent matrix [<Gj,Yi]> mx1\n",
    "\n",
    "\n",
    "for i in range(m): # n + 1 degree equation\n",
    "    for j in range(m):\n",
    "        A[i][j] = np.sum(H[i]*H[j])     \n",
    "        \n",
    "for i in range(m):\n",
    "    B[i][0] = np.sum(Z*H[i])\n",
    "\n",
    "#Linear System solution AX = B --> X = BA^-1\n",
    "matrix_solution = np.linalg.inv(A).dot(B)\n",
    "alpha,beta = matrix_solution\n",
    "\n",
    "#Figure out the constants of the exponential function\n",
    "v = np.exp(alpha)\n",
    "w= - beta\n",
    "\n",
    "#G(X)\n",
    "#G_non_linear =s * np.exp(-t*X)\n",
    "G_non_linear = (v[0]/((X-300)**w[0])) - 25\n",
    "G_non_linear = np.nan_to_num(G_non_linear)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [],
   "source": [
    "G_non_linear = np.nan_to_num(G_non_linear)\n",
    "\n",
    "#Sum of squared error\n",
    "print('SSE: ', np.sum((Y-G_non_linear)**2))\n",
    "\n",
    "#R squared\n",
    "corr_matrix = np.corrcoef(Y,G_non_linear)\n",
    "R_sq = corr_matrix[0,1] **2\n",
    "print('R^2:',R_sq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_income ['HR predicted'] = df_income['REN_RENSF_D'].apply(lambda x: (v[0]/((x-300)**w[0])) - 25)\n",
    "df_income"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prediction_interval(X,Y,F, pi = 0.95):\n",
    "    \"\"\"\n",
    "    Get a prediction interval for a regression\n",
    "    \n",
    "    Inputs:\n",
    "    X = precitor variable (independent variable)\n",
    "    Y = response variable (denpendent variable)\n",
    "    F =  predicted values\n",
    "\n",
    "    \"\"\"\n",
    "    SSE = np.sum((Y - F)**2)\n",
    "    stdev = np.sqrt(1/(len(Y)-2) *SSE)\n",
    "    alpha = 1- pi\n",
    "    prob = 1 - (alpha/2)\n",
    "    t_score = scipy.stats.t.ppf(prob , X.shape[0])\n",
    "    interval = t_score * stdev\n",
    "    return interval\n",
    "\n",
    "#q = '>2000'\n",
    "#Xt = df_final[df_final.FORM_SEC_QUANTILE == q]['Avg. Income in the Formal Sector']\n",
    "#Yt = df_final[df_final.FORM_SEC_QUANTILE == q]['HOMICIDE_RATE']\n",
    "#Ft = df_final[df_final.FORM_SEC_QUANTILE == q]['HR predicted']\n",
    "#prediction_interval(Xt,Yt,Ft)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_int= pd.DataFrame(df_income.groupby(['FORM_SEC_QUANTILE']).apply(lambda x: prediction_interval(x['REN_RENSF_D'],x.HOMICIDE_RATE, x['HR predicted'])), columns = ['prediction_interval_hr']).sort_index(ascending = True)\n",
    "df_int = df_int.iloc[[2,0,1,-1],:]\n",
    "#df_int.index = [13,20,32]\n",
    "df_int"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 4 points of variance\n",
    "conf_level = 0.95\n",
    "plt.figure()\n",
    "plot_std = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'FORM_SEC_QUANTILE', linewidth = 7, alpha = 0.7, color ='goldenrod', title = \"{}% Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 16)\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_std.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_std.set_ylabel(\"Prediction Interval $(C^o)$\", fontsize = 17)\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_int.index = [500,1000,1500,2000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Newton(X,Y, xi):\n",
    "    'input: dataset (x,y) and x value'\n",
    "    'output: display of pyramid of divided difference and the respective y value'\n",
    "    n = np.shape(Y)[0]\n",
    "    pyramid =  np.zeros([n,n]) #Table of divided - difference\n",
    "    df = pd.DataFrame(pyramid)\n",
    "    df[0] = Y  #including Yi values in the first columns\n",
    "    for j in range(1,n):\n",
    "        for i in range(n-j):\n",
    "            #Creating pyramid of divided difference updating each column\n",
    "            df.iloc[i,j] = (df.iloc[i+1,j-1] -df.iloc[i,j-1])/(X[i+j] - X[i])\n",
    "    #display(df)     \n",
    "    #Newton Polynomial\n",
    "    coef = 1 \n",
    "    yi = df.iloc[0,0]\n",
    "    for i in range(n-1): #iterate in order to have polynomial\n",
    "        coef *= (xi - X[i]) # (x-X0)(x-X1)....(x-Xi-1) for i + n distinct points, i= 0,1,2... n \n",
    "        yi =  yi  + df.iloc[0,i+1] *coef # f(x) = [y0] + (x-x0)[y0,y1] +(x-x0)(x-1)[y0,y1,y2].....\n",
    "    return (yi,df)\n",
    "\n",
    "#Plotting\n",
    "Yint = df_int.values\n",
    "Xint = df_int.index\n",
    "xplot = np.linspace(Xint[0], Xint[-1], num = 100)\n",
    "yplot = []\n",
    "for x in xplot:\n",
    "    yplot.append(Newton(Xint,Yint,x)[0])\n",
    "yplot = np.array(yplot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 6 points of variance\n",
    "plt.figure()\n",
    "plot_int = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'index', linewidth = 7, alpha = 0.7, color ='goldenrod', fontsize = 16)\n",
    "#interpolate\n",
    "plt.plot(xplot,yplot, '-b', color = 'slateblue', alpha = 0.8, label = 'Interpolation Polynomial Curve')\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_int.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_int.set_ylabel(\"Prediction Interval\", fontsize = 17)\n",
    "plot_int.set_title(\"{}% Dynamic Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 17, fontweight = 'bold')\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 6 points of variance\n",
    "plt.figure()\n",
    "plot_int = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'index', linewidth = 7, alpha = 0.7, color ='goldenrod', fontsize = 16)\n",
    "#interpolate\n",
    "plt.plot(xplot,yplot, '-b', color = 'slateblue', alpha = 2, label = 'Interpolation Polynomial Curve')\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_int.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_int.set_ylabel(\"Prediction Interval\", fontsize = 17)\n",
    "plot_int.set_title(\"{}% Dynamic Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 17, fontweight = 'bold')\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 6 points of variance\n",
    "plt.figure()\n",
    "plot_int = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'index', linewidth = 7, alpha = 0.7, color ='goldenrod', fontsize = 16)\n",
    "#interpolate\n",
    "plt.plot(xplot,yplot, '-b', color = 'slateblue', alpha = 1, label = 'Interpolation Polynomial Curve')\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_int.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_int.set_ylabel(\"Prediction Interval\", fontsize = 17)\n",
    "plot_int.set_title(\"{}% Dynamic Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 17, fontweight = 'bold')\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 6 points of variance\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "plot_int = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'index', linewidth = 7, alpha = 0.7, color ='goldenrod', fontsize = 16)\n",
    "#interpolate\n",
    "plt.plot(xplot,yplot, '-b', color = 'slateblue', alpha = 1, label = 'Interpolation Polynomial Curve')\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_int.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_int.set_ylabel(\"Prediction Interval\", fontsize = 17)\n",
    "plot_int.set_title(\"{}% Dynamic Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 17, fontweight = 'bold')\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 6 points of variance\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "plot_int = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'index', linewidth = 7, alpha = 1, color ='goldenrod', fontsize = 16)\n",
    "#interpolate\n",
    "plt.plot(xplot,yplot, '-b', color = 'slateblue', alpha = 1, label = 'Interpolation Polynomial Curve')\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_int.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_int.set_ylabel(\"Prediction Interval\", fontsize = 17)\n",
    "plot_int.set_title(\"{}% Dynamic Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 17, fontweight = 'bold')\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 6 points of variance\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "plot_int = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'index', linewidth = 7, alpha = 1, color ='goldenrod', fontsize = 16)\n",
    "#interpolate\n",
    "plt.plot(xplot,yplot, '-b', color = 'slateblue', alpha = 1, label = 'Interpolation Polynomial Curve', linewidth = 3)\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_int.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_int.set_ylabel(\"Prediction Interval\", fontsize = 17)\n",
    "plot_int.set_title(\"{}% Dynamic Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 17, fontweight = 'bold')\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 6 points of variance\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "plot_int = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'index', linewidth = 7, markersize = 3, alpha = 1, color ='goldenrod', fontsize = 16)\n",
    "#interpolate\n",
    "plt.plot(xplot,yplot, '-b', color = 'slateblue', alpha = 1, label = 'Interpolation Polynomial Curve', linewidth = 3)\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_int.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_int.set_ylabel(\"Prediction Interval\", fontsize = 17)\n",
    "plot_int.set_title(\"{}% Dynamic Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 17, fontweight = 'bold')\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 6 points of variance\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "plot_int = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'index', linewidth = 7, marksize = 3, alpha = 1, color ='goldenrod', fontsize = 16)\n",
    "#interpolate\n",
    "plt.plot(xplot,yplot, '-b', color = 'slateblue', alpha = 1, label = 'Interpolation Polynomial Curve', linewidth = 3)\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_int.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_int.set_ylabel(\"Prediction Interval\", fontsize = 17)\n",
    "plot_int.set_title(\"{}% Dynamic Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 17, fontweight = 'bold')\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 6 points of variance\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "plot_int = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'index', linewidth = 7, alpha = 1, color ='goldenrod', fontsize = 16)\n",
    "#interpolate\n",
    "plt.plot(xplot,yplot, '-b', color = 'slateblue', alpha = 1, label = 'Interpolation Polynomial Curve', linewidth = 3)\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_int.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_int.set_ylabel(\"Prediction Interval\", fontsize = 17)\n",
    "plot_int.set_title(\"{}% Dynamic Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 17, fontweight = 'bold')\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 6 points of variance\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "plot_int = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'index', linewidth = 10, alpha = 1, color ='goldenrod', fontsize = 16)\n",
    "#interpolate\n",
    "plt.plot(xplot,yplot, '-b', color = 'slateblue', alpha = 1, label = 'Interpolation Polynomial Curve', linewidth = 3)\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_int.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_int.set_ylabel(\"Prediction Interval\", fontsize = 17)\n",
    "plot_int.set_title(\"{}% Dynamic Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 17, fontweight = 'bold')\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 6 points of variance\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "plot_int = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'index', linewidth = 10, alpha = 1, color ='goldenrod', fontsize = 16)\n",
    "#interpolate\n",
    "plt.plot(xplot,yplot, '-b', color = 'slateblue', alpha = 1, label = 'Interpolation Polynomial Curve', linewidth = 3)\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_int.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_int.set_ylabel(\"Prediction Interval\", fontsize = 17)\n",
    "plot_int.set_title(\"{}% Dynamic Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 17, fontweight = 'bold')\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 6 points of variance\n",
    "plt.figure()\n",
    "sea.set(rc = {'axes.facecolor':'black'} )\n",
    "plot_int = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'index', linewidth = 10, alpha = 1, color ='goldenrod', fontsize = 16)\n",
    "#interpolate\n",
    "plt.plot(xplot,yplot, '-b', color = 'royalblue', alpha = 1, label = 'Interpolation Polynomial Curve', linewidth = 3)\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_int.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_int.set_ylabel(\"Prediction Interval\", fontsize = 17)\n",
    "plot_int.set_title(\"{}% Dynamic Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 17, fontweight = 'bold')\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 6 points of variance\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axes.grid': True})\n",
    "plot_int = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'index', linewidth = 10, alpha = 1, color ='goldenrod', fontsize = 16)\n",
    "#interpolate\n",
    "plt.plot(xplot,yplot, '-b', color = 'royalblue', alpha = 1, label = 'Interpolation Polynomial Curve', linewidth = 3)\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_int.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_int.set_ylabel(\"Prediction Interval\", fontsize = 17)\n",
    "plot_int.set_title(\"{}% Dynamic Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 17, fontweight = 'bold')\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 6 points of variance\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axes.grid': True})\n",
    "plot_int = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'index', linewidth = 10, alpha = 1, color ='goldenrod', fontsize = 16)\n",
    "#interpolate\n",
    "plt.plot(xplot,yplot, '-b', color = 'stadeblue', alpha = 1, label = 'Interpolation Polynomial Curve', linewidth = 3)\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_int.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_int.set_ylabel(\"Prediction Interval\", fontsize = 17)\n",
    "plot_int.set_title(\"{}% Dynamic Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 17, fontweight = 'bold')\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 6 points of variance\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axes.grid': True})\n",
    "plot_int = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'index', linewidth = 10, alpha = 1, color ='goldenrod', fontsize = 16)\n",
    "#interpolate\n",
    "plt.plot(xplot,yplot, '-b', color = 'midnightblue', alpha = 1, label = 'Interpolation Polynomial Curve', linewidth = 3)\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_int.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_int.set_ylabel(\"Prediction Interval\", fontsize = 17)\n",
    "plot_int.set_title(\"{}% Dynamic Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 17, fontweight = 'bold')\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using interpolation to figure out the best equation that interpolate the 6 points of variance\n",
    "plt.figure()\n",
    "sea.set_style('darkgrid', {'axes.grid': True})\n",
    "plot_int = df_int.reset_index().plot(kind = 'scatter', y =\"prediction_interval_hr\", x = 'index', linewidth = 10, alpha = 0.7, color ='goldenrod', fontsize = 16)\n",
    "#interpolate\n",
    "plt.plot(xplot,yplot, '-b', color = 'midnightblue', alpha = 1, label = 'Interpolation Polynomial Curve', linewidth = 3)\n",
    "\n",
    "\n",
    "#Label\n",
    "plot_int.set_xlabel(\"Avg. Income in the Formal Sector\", fontsize = 17)\n",
    "plot_int.set_ylabel(\"Prediction Interval\", fontsize = 17)\n",
    "plot_int.set_title(\"{}% Dynamic Prediction Interval for Homicide Rate\".format(conf_level*100), fontsize = 17, fontweight = 'bold')\n",
    "\n",
    "#Setting\n",
    "plt.gcf().set_size_inches(15,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [],
   "source": [
    "delta  = prediction_interval(900, polynomial = Newton) - prediction_interval(800, polynomial = Newton)\n",
    "delta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import geopandas\n",
    "import mapclassify\n",
    "import math\n",
    "import datetime as dt\n",
    "import os\n",
    "import re\n",
    "import scipy\n",
    "import statsmodels.api as sm\n",
    "import sklearn\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sea\n",
    "%notebook matplotlib\n",
    "\n",
    "from IPython.core.display import display, HTML\n",
    "display(HTML(\"<style>.container { width:100% !important; }</style>\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import geopandas\n",
    "import mapclassify\n",
    "import math\n",
    "import datetime as dt\n",
    "import os\n",
    "import re\n",
    "import scipy\n",
    "import statsmodels.api as sm\n",
    "import sklearn\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sea\n",
    "%notebook matplotlib\n",
    "\n",
    "from IPython.core.display import display, HTML\n",
    "display(HTML(\"<style>.container { width:100% !important; }</style>\"))"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
